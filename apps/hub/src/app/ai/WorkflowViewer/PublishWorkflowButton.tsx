import { useRouter } from "next/navigation";
import { FC, useState } from "react";

import { ClientWorkflow } from "@quri/squiggle-ai";
import { Button } from "@quri/ui";

import { NewModelFormBody, NewModelFormShape } from "@/app/new/model/NewModel";
import { SafeActionFormModal } from "@/components/ui/SafeActionFormModal";
import { createModelAction } from "@/models/actions/createModelAction";

type Props = {
  workflow: Extract<ClientWorkflow, { status: "finished" }>;
};

const PublishWorkflowModal: FC<Props & { close: () => void }> = ({
  workflow,
  close,
}) => {
  const router = useRouter();

  return (
    <SafeActionFormModal<NewModelFormShape, typeof createModelAction>
      title="Publish Workflow"
      action={createModelAction}
      close={close}
      defaultValues={{
        // TODO - LLM-generated slug
        isPrivate: false,
      }}
      formDataToInput={(data) => ({
        code: `// Generated by Squiggle AI
${workflow.result.code}`,
        slug: data.slug ?? "",
        groupSlug: data.group?.slug,
        isPrivate: data.isPrivate,
      })}
      submitText="Publish"
      onSuccess={(data) => {
        // Note: redirect in server action would be incompatible with https://github.com/TheEdoRan/next-safe-action/issues/303
        // (and might a bad idea anyway, returning a url is more verbose but more flexible for reuse)
        router.push(data.url);
      }}
    >
      <NewModelFormBody />
    </SafeActionFormModal>
  );
};

export const PublishWorkflowButton: FC<Props> = ({ workflow }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <>
      <Button theme="primary" size="small" onClick={() => setIsOpen(true)}>
        Publish
      </Button>
      {isOpen && (
        <PublishWorkflowModal
          workflow={workflow}
          close={() => setIsOpen(false)}
        />
      )}
    </>
  );
};
