import { useToast } from "@quri/ui";
import { useMemo } from "react";

// auto-generated by `publish-all.ts`, don't touch
export const squiggleVersions = ["0.8.6", "0.8.5", "dev"] as const;

export type SquiggleVersion = (typeof squiggleVersions)[number];

// auto-generated by `publish-all.ts`, don't touch
export const defaultSquiggleVersion: SquiggleVersion = "0.8.6";

export function checkSquiggleVersion(
  version: string
): version is SquiggleVersion {
  return (squiggleVersions as readonly string[]).includes(version);
}

export function useValidSquiggleVersion(version: string): SquiggleVersion {
  const toast = useToast();

  const usedVersion = useMemo<SquiggleVersion>(() => {
    if (!checkSquiggleVersion(version)) {
      toast(
        `Version ${version} is not available. Rendering with ${defaultSquiggleVersion} instead.`,
        "error"
      );
      return defaultSquiggleVersion;
    }
    return version;
  }, [version, toast]);

  return usedVersion;
}

/*
 * This is an example of a type predicate (https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates)
 * that's useful for setting component props conditionally.
 * See `EditSquiggleSnippetModel` in the Squiggle Hub source code for an example how it's used.
 */
export function versionSupportsDropdownMenu<
  T extends { version: SquiggleVersion },
>(arg: T): arg is Extract<T, { version: Exclude<SquiggleVersion, "0.8.5"> }> {
  return !["0.8.5"].includes(arg.version);
}
