import { testEvalToBe } from "../helpers/reducerHelpers.js";

describe("Numbers", () => {
  const num = 5.5;
  const negativeNum = -5.5;
  const expNum = 10;
  const sumEmptyList = [];
  const sumList = [2,5,3];
  const productEmptyList = [];
  const productList = [2,5,3];
  
  testEvalToBe(`Number.floor(${num})`, "5");
  testEvalToBe(`Number.ceil(${num})`, "6");
  testEvalToBe(`floor(${num})`, "5");
  testEvalToBe(`ceil(${num})`, "6");
  testEvalToBe(`Number.abs(${num})`, "5.5");
  testEvalToBe(`Number.abs(${negativeNum})`, "5.5");
  testEvalToBe("Number.abs(0)", "0");
  testEvalToBe(`abs(${num})`, "5.5");
  testEvalToBe(`Number.exp(${expNum})`, "22026.465794806718");
  testEvalToBe(`Number.log10(${expNum})`, "1");
  testEvalToBe(`Number.log2(${expNum})`, "3.321928094887362");
  testEvalToBe(`Number.sum(${sumEmptyList})`, "0");
  testEvalToBe(`Number.sum(${sumList})`, "10");
  testEvalToBe(`sum(${sumEmptyList})`, "0");
  testEvalToBe(`sum(${sumList})`, "10");
  testEvalToBe(`Number.product(${productEmptyList})`, "1");
  testEvalToBe(`Number.product(${productList})`, "30");
  testEvalToBe("Number.min([2,5,3])", "2");
  testEvalToBe("Number.max([2,5,3])", "5");
  testEvalToBe("Number.mean([0,5,10])", "5");
  testEvalToBe("Number.geomean([1,5,18])", "4.481404746557164");
  testEvalToBe("Number.stdev([0,5,10,15])", "5.5901699437494745");
  testEvalToBe("Number.variance([0,5,10,15])", "31.25");
  const sortEmptyList = [];
  const sortList = [10,0,15,5];
  const cumsumEmptyList = [];
  const cumsumList = [1,5,3];
  const cumprodEmptyList = [];
  const cumprodList = [1,5,3];
  
  testEvalToBe(`Number.sort(${sortEmptyList})`, "[]");
  testEvalToBe(`Number.sort(${sortList})`, "[0,5,10,15]");
  testEvalToBe(`Number.cumsum(${cumsumEmptyList})`, "[]");
  testEvalToBe(`Number.cumsum(${cumsumList})`, "[1,6,9]");
  testEvalToBe(`Number.cumprod(${cumprodEmptyList})`, "[]");
  testEvalToBe(`Number.cumprod(${cumprodList})`, "[1,5,15]");
  testEvalToBe("Number.diff([1])", "[]");
  testEvalToBe("Number.diff([1,5,3])", "[4,-2]");
});
