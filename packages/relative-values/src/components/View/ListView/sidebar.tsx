import clsx from "clsx";
import { deflate, inflate } from "pako";
import { ModelEvaluator } from "@/values/ModelEvaluator";
import { Catalog, InterfaceWithModels, Item } from "@/types";
import { fromByteArray } from "base64-js";
import { getModelCode, Model } from "@/model/utils";
import { FC, Fragment, useState } from "react";
import { NumberShower } from "@quri/squiggle-components";

function setHashData(data) {
  const text = JSON.stringify(data);
  const HASH_PREFIX = "https://www.squiggle-language.com/playground#code=";
  const compressed = deflate(text, { level: 9 });
  return HASH_PREFIX + encodeURIComponent(fromByteArray(compressed));
}

interface TableRowProps {
  label: string;
  number: number;
}

const TableRow: React.FC<TableRowProps> = ({ label, number }) => (
  <Fragment key={label}>
    <div className="text-slate-400 py-1 mt-1 font-normal text-left text-xs col-span-1">
      {label}
    </div>
    <div className="py-1 pl-2 text-left text-slate-600 text-md col-span-2">
      <NumberShower number={number} precision={2} />
    </div>
  </Fragment>
);

let buildurl = (
  model: ModelEvaluator,
  chosenItem: Item,
  selectedItem: Item
) => {
  let str = `${getModelCode(model.model)}
// ------- AUTOGENERATED CODE -------
dists = fn("${chosenItem.id}", "${selectedItem.id}")
value_${chosenItem.id} = dists[0]
value_${selectedItem.id} = dists[1]
relativeValue = value_${chosenItem.id} / value_${selectedItem.id}`;
  const url = setHashData({ initialSquiggleString: str });
  return url;
};

type Props = {
  model: ModelEvaluator;
  catalog: Catalog;
  highlightedItems: [string, string] | undefined;
  selectedItem: Item | undefined;
};

export const ItemSideBar: FC<Props> = ({
  model,
  catalog,
  highlightedItems,
  selectedItem,
}) => {
  let chosenItem = catalog.items.find(
    (item) => item.id === (highlightedItems && highlightedItems[0])
  );
  if (!chosenItem || !selectedItem) {
    return <div>Need to select an item</div>;
  } else {
    const result = model.compare(chosenItem.id, selectedItem.id);
    if (!result.ok) {
      return <div>Result not found</div>;
    } else {
      let item = result.value;
      const url = buildurl(model, chosenItem, selectedItem);
      return (
        <div>
          <div className="mt-2 mb-6 flex overflow-x-auto items-center p-1">
            <span className="text-slate-500 text-md whitespace-nowrap mr-1">
              value
            </span>
            <span className="text-slate-300 text-xl whitespace-nowrap">(</span>
            <span className="text-sm bg-blue-100 rounded-sm text-slate-900 px-1 text-center whitespace-pre-wrap mr-2 ml-2">
              {chosenItem.name}
            </span>
            <span className="text-slate-300 px-1 text-xl whitespace-nowrap">
              /
            </span>

            <span className="text-sm bg-slate-200 bg-opacity-60 rounded-sm text-slate-800 px-1 text-center whitespace-pre-wrap mr-2 ml-2">
              <span className="inline-block">{selectedItem.name}</span>
            </span>
            <span className="text-slate-300 text-xl whitespace-nowrap">)</span>
          </div>

          <div className="grid grid-cols-6 gap-1 w-full mt-10 mb-10">
            <TableRow label="median" number={item.median} />
            <TableRow label="mean" number={item.mean} />
            <TableRow label="p5" number={item.min} />
            <TableRow label="p95" number={item.max} />
            <TableRow label="uncertainty" number={item.uncertainty} />
          </div>

          <a href={url}>Open in Playground</a>
        </div>
      );
    }
  }
};
