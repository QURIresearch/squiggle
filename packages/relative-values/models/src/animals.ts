import { Model } from "@/model/utils";
import { Catalog, InterfaceWithModels, Item } from "@/types";
import { sq } from "@quri/squiggle-lang";

// Note: Much of this was generated by this file:
// https://observablehq.com/d/98cbe0073226a5f9

function getCatalog(): Catalog {
  const items: Item[] = [
    {
      id: "one_human_qaly",
      name: "1 human QALY (quality-adjusted life-year)",
      clusterId: "sentient_welfare"
    },
    {
      id: "cow_value_per_year_of_life",
      name: "cow value per year of life",
      clusterId: "sentient_welfare",
    },
  ];

  return {
    id: "relative-values-animals-2023-04",
    title: "Relative values for animals and animal charities",
    items,
    clusters: {
      sentient_welfare: {
        name: "sentient welfare",
        color: "#DB828C",
      },
      sentient_welfare_interventions: {
        name: "sentient welfare interventions",
        color: "#DB828C",
      },
    },
  };
}

function getTextModel(): Model {
  return {
    id: "relative-values-animals-2023-04",
    title: "Estimates for the relative value of animals and animal charities",
    author: "Nuno Sempere",
    mode: "text",
    code: sq`

// Utils
ss = SampleSet.fromDist
tt(dist) = truncateRight(dist, 100)

// Add human QALY as a reference point
one_human_qaly = {
  id: "one_human_qaly", 
  name: "1 human QALY (quality-adjusted life-year)",
  value: normal(1, 0.01)
}

// Cows
value_happy_cow_year = 0.05 to 0.3
value_tortured_cow_year = -(0.1 to 2)
value_farmed_cow_year = normal({ p10: -0.2, p90: 0.1 })
// ^ purely subjective estimates
// the thing is, it doesn't seem that unlikely to me
// that cows do lead net positive lives
weight_cow = mixture([450 to 1800, 360 to 1100], [1/2,1/2])
non_wastage_proportion_cow = (0.5 to 0.7) -> ss // should be a beta. 
lifetime_cow = (30 to 42) / 12
calories_cow = mixture(0.8M to 1.4M, (500k to 700k) * (weight_cow * non_wastage_proportion_cow)/1000) 
// ^ kilocalories, averaging two estimates from <https://www.reddit.com/r/theydidthemonstermath/comments/a8ha9r/how_many_calories_are_in_a_whole_cow/>

cow_estimates = {
  name: "cow",
  value_year: value_farmed_cow_year -> ss,
  weight: weight_cow,
  calories: calories_cow,
  lifetime: lifetime_cow -> ss
}

// animal estimates
toAllAnimalEstimates = {|animal|
  value_year = animal.value_year
  value_in_lifetime = animal.lifetime * animal.value_year
  value_per_calorie = animal.lifetime * animal.value_year / 
    animal.calories

  result = [
    ({
      id: animal.name + "_value_per_year_of_life", 
      name: animal.name + " value per year of life", 
      value: value_year
    }),
    ({
      id: animal.name + "_value_per_lifetime", 
      name: animal.name + " value per lifetime", 
      value: value_in_lifetime
    }),
    ({
      id: animal.name + "_value_per_calorie", 
      name: animal.name + " value per calorie", 
      value: value_per_calorie
    }),    
  ]
  result
}

animal_estimates = [cow_estimates]
animal_estimates_disaggregated = List.map(animal_estimates, toAllAnimalEstimates) -> List.flatten

items = [animal_estimates_disaggregated, [one_human_qaly]] -> List.flatten -> List.map({|item| [item.id, item]})  -> Dict.fromList

// Result
fn(a, b) = [items[a].value, items[b].value]
// items`,
  };
}
export const catalog = getCatalog();
export const models = [getTextModel()];
