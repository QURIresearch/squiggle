{
  "namespaces": [
    {
      "name": "Common",
      "description": "",
      "functionNames": [
        "equal",
        "unequal",
        "typeOf",
        "inspect",
        "throw",
        "try"
      ]
    },
    {
      "name": "Boolean",
      "description": "",
      "functionNames": [
        "or",
        "and",
        "not"
      ]
    },
    {
      "name": "Date",
      "description": "Dates are a simple date time type.",
      "functionNames": [
        "make",
        "fromUnixTime",
        "toUnixTime",
        "subtract",
        "subtract",
        "add",
        "smaller",
        "larger",
        "smallerEq",
        "largerEq",
        "rangeDomain"
      ]
    },
    {
      "name": "Dict",
      "description": "Squiggle dictionaries work similar to Python dictionaries. The syntax is similar to objects in Javascript.",
      "functionNames": [
        "toList",
        "fromList",
        "set",
        "delete",
        "merge",
        "mergeMany",
        "map",
        "mapKeys",
        "omit",
        "has",
        "size",
        "keys",
        "values",
        "pick"
      ]
    },
    {
      "name": "Dist",
      "description": "Distributions are the flagship data type in Squiggle. The distribution type is a generic data type that contains one of three different formats of distributions.",
      "functionNames": [
        "make",
        "mixture",
        "mx",
        "normal",
        "lognormal",
        "uniform",
        "beta",
        "cauchy",
        "gamma",
        "logistic",
        "to",
        "exponential",
        "bernoulli",
        "triangular",
        "mean",
        "median",
        "stdev",
        "variance",
        "min",
        "max",
        "mode",
        "sample",
        "sampleN",
        "exp",
        "cdf",
        "pdf",
        "inv",
        "quantile",
        "truncate",
        "truncateLeft",
        "truncateRight",
        "add",
        "multiply",
        "subtract",
        "divide",
        "pow",
        "log",
        "log",
        "log10",
        "unaryMinus",
        "sum",
        "product",
        "cumsum",
        "cumprod",
        "diff",
        "dotAdd",
        "dotMultiply",
        "dotSubtract",
        "dotDivide",
        "dotPow",
        "normalize",
        "isNormalized",
        "integralSum",
        "sparkline",
        "klDivergence",
        "logScore"
      ]
    },
    {
      "name": "SampleSet",
      "description": "Sample set distributions are one of the three distribution formats. Internally, they are stored as a list of numbers.",
      "functionNames": [
        "make",
        "fromDist",
        "fromNumber",
        "fromList",
        "toList",
        "fromFn",
        "map",
        "map2",
        "map3",
        "mapN"
      ]
    },
    {
      "name": "Sym",
      "description": "The Sym module provides functions to create some common symbolic distributions.",
      "functionNames": [
        "normal",
        "lognormal",
        "uniform",
        "beta",
        "cauchy",
        "gamma",
        "logistic",
        "exponential",
        "bernoulli",
        "pointMass",
        "triangular"
      ]
    },
    {
      "name": "PointSet",
      "description": "Point set distributions are one of the three distribution formats. They are stored as a list of x-y coordinates representing both discrete and continuous distributions.",
      "functionNames": [
        "make",
        "makeContinuous",
        "makeDiscrete",
        "fromDist",
        "fromNumber",
        "downsample",
        "support",
        "mapY"
      ]
    },
    {
      "name": "Duration",
      "description": "Durations are a simple time type, representing a length of time. They are internally stored as milliseconds, but often shown and written using seconds, minutes, hours, days, etc.",
      "functionNames": [
        "fromMinutes",
        "fromHours",
        "fromDays",
        "fromYears",
        "toMinutes",
        "toHours",
        "toDays",
        "toYears",
        "unaryMinus",
        "add",
        "subtract",
        "multiply",
        "divide",
        "divide",
        "smaller",
        "larger",
        "smallerEq",
        "largerEq"
      ]
    },
    {
      "name": "List",
      "description": "Lists are a simple data structure that can hold any type of value. They are similar to arrays in Javascript or lists in Python.",
      "functionNames": [
        "make",
        "upTo",
        "reverse",
        "concat",
        "sortBy",
        "append",
        "join",
        "flatten",
        "shuffle",
        "zip",
        "unzip",
        "slice",
        "uniq",
        "uniqBy",
        "filter",
        "length",
        "first",
        "last",
        "minBy",
        "maxBy",
        "every",
        "some",
        "find",
        "findIndex",
        "map",
        "reduce",
        "reduceReverse",
        "reduceWhile"
      ]
    },
    {
      "name": "Math",
      "description": "Simple constants and functions for math in Squiggle.",
      "functionNames": [
        "sqrt",
        "sin",
        "cos",
        "tan",
        "asin",
        "acos",
        "atan"
      ]
    },
    {
      "name": "MixedSet",
      "description": "",
      "functionNames": [
        "difference",
        "intersection",
        "union",
        "isSubsetOf",
        "isSupersetOf",
        "isEqual",
        "isEmpty",
        "min",
        "max"
      ]
    },
    {
      "name": "Plot",
      "description": "",
      "functionNames": [
        "dist",
        "dists",
        "numericFn",
        "distFn",
        "scatter"
      ]
    },
    {
      "name": "Number",
      "description": "Squiggle numbers are Javascript floats.",
      "functionNames": [
        "smaller",
        "larger",
        "smallerEq",
        "largerEq",
        "add",
        "subtract",
        "multiply",
        "divide",
        "pow",
        "unaryMinus",
        "exp",
        "log",
        "log10",
        "log2",
        "floor",
        "ceil",
        "abs",
        "round",
        "sum",
        "product",
        "cumprod",
        "diff",
        "min",
        "max",
        "mean",
        "quantile",
        "median",
        "geomean",
        "stdev",
        "variance",
        "sort",
        "rangeDomain"
      ]
    },
    {
      "name": "Scale",
      "description": "Scales for plots.",
      "functionNames": [
        "linear",
        "log",
        "symlog",
        "power",
        "date"
      ]
    },
    {
      "name": "Spec",
      "description": "Function Specifications",
      "functionNames": [
        "make"
      ]
    },
    {
      "name": "String",
      "description": "Functions for working with strings in Squiggle",
      "functionNames": [
        "make",
        "concat",
        "add",
        "split"
      ]
    },
    {
      "name": "Table",
      "description": "Tables are a simple date time type.",
      "functionNames": [
        "make"
      ]
    },
    {
      "name": "System",
      "description": "",
      "functionNames": [
        "sampleCount"
      ]
    },
    {
      "name": "Tag",
      "description": "The Tag module handles tags, which allow the additions of metadata to Squiggle variables.",
      "functionNames": [
        "name",
        "getName",
        "doc",
        "getDoc",
        "showAs",
        "getShowAs",
        "getExportData",
        "spec",
        "getSpec",
        "format",
        "getFormat",
        "hide",
        "getHide",
        "startOpen",
        "startClosed",
        "getStartOpenState",
        "notebook",
        "getNotebook",
        "location",
        "getLocation",
        "getAll",
        "omit",
        "clear"
      ]
    },
    {
      "name": "Calculator",
      "description": "The Calculator module helps you create custom calculators",
      "functionNames": [
        "make"
      ]
    },
    {
      "name": "Input",
      "description": "Inputs are now only used for describing forms for calculators.",
      "functionNames": [
        "text",
        "textArea",
        "checkbox",
        "select"
      ]
    },
    {
      "name": "RelativeValues",
      "description": "",
      "functionNames": [
        "gridPlot"
      ]
    },
    {
      "name": "Danger",
      "description": "Newer experimental functions which are less stable than Squiggle as a whole",
      "functionNames": [
        "json",
        "jsonString",
        "parseFloat",
        "now",
        "laplace",
        "yTransform",
        "factorial",
        "choose",
        "binomial",
        "combinations",
        "allCombinations",
        "binomialDist",
        "poissonDist",
        "integrateFunctionBetweenWithNumIntegrationPoints",
        "integrateFunctionBetweenWithEpsilon",
        "optimalAllocationGivenDiminishingMarginalReturnsForManyFunctions"
      ]
    }
  ],
  "items": [
    {
      "name": "equal",
      "namespace": "Common",
      "requiresNamespace": false,
      "signatures": [
        "(any, any) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "=="
      },
      "isUnit": false,
      "description": "Returns true if the two values passed in are equal, false otherwise. Does not work for Squiggle functions, but works for most other types."
    },
    {
      "name": "unequal",
      "namespace": "Common",
      "requiresNamespace": false,
      "signatures": [
        "(any, any) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "!="
      },
      "isUnit": false
    },
    {
      "name": "typeOf",
      "namespace": "Common",
      "requiresNamespace": false,
      "signatures": [
        "(any) => String"
      ],
      "isUnit": false,
      "description": "Returns the type of the value passed in as a string. This is useful when you want to treat a value differently depending on its type.",
      "examples": [
        {
          "text": "myString = typeOf(\"foo\")\nmyBool = typeOf(true)\nmyDist = typeOf(5 to 10)\nmyFn = typeOf({|e| e})",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "inspect",
      "namespace": "Common",
      "requiresNamespace": false,
      "signatures": [
        "('A, message?: String) => 'A"
      ],
      "isUnit": false,
      "description": "Runs Console.log() in the [Javascript developer console](https://www.digitalocean.com/community/tutorials/how-to-use-the-javascript-developer-console) and returns the value passed in."
    },
    {
      "name": "throw",
      "namespace": "Common",
      "requiresNamespace": false,
      "signatures": [
        "(message: String?) => any"
      ],
      "isUnit": false,
      "description": "Throws an error. You can use `try` to recover from this error."
    },
    {
      "name": "try",
      "namespace": "Common",
      "requiresNamespace": false,
      "signatures": [
        "(fn: () => 'A, fallbackFn: () => 'B) => 'A|'B"
      ],
      "isUnit": false,
      "description": "Try to run a function and return its result. If the function throws an error, return the result of the fallback function instead."
    },
    {
      "name": "or",
      "namespace": "Boolean",
      "requiresNamespace": false,
      "signatures": [
        "(Bool, Bool) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "||"
      },
      "isUnit": false
    },
    {
      "name": "and",
      "namespace": "Boolean",
      "requiresNamespace": false,
      "signatures": [
        "(Bool, Bool) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "&&"
      },
      "isUnit": false
    },
    {
      "name": "not",
      "namespace": "Boolean",
      "requiresNamespace": false,
      "signatures": [
        "(Bool) => Bool"
      ],
      "shorthand": {
        "type": "unary",
        "symbol": "!"
      },
      "isUnit": false
    },
    {
      "name": "make",
      "namespace": "Date",
      "requiresNamespace": true,
      "signatures": [
        "(String) => Date",
        "(year: Number, month: Number, day: Number) => Date",
        "(year: Number) => Date"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "d1 = Date.make(\"2020-05-12\")\nd2 = Date.make(2020, 5, 10)\nd3 = Date.make(2020.5)",
          "isInteractive": false,
          "useForTests": false
        }
      ]
    },
    {
      "name": "fromUnixTime",
      "namespace": "Date",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Date"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Date.fromUnixTime(1589222400)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "toUnixTime",
      "namespace": "Date",
      "requiresNamespace": true,
      "signatures": [
        "(Date) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Date.toUnixTime(Date.make(2020, 5, 12))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "subtract",
      "namespace": "Date",
      "requiresNamespace": false,
      "signatures": [
        "(Date, Date) => Duration"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "-"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "Date.make(2020, 5, 12) - Date.make(2000, 1, 1)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "subtract",
      "namespace": "Date",
      "requiresNamespace": false,
      "signatures": [
        "(Date, Date) => Duration"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "-"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "Date.make(2020, 5, 12) - Date.make(2000, 1, 1)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "add",
      "namespace": "Date",
      "requiresNamespace": false,
      "signatures": [
        "(Date, Duration) => Date",
        "(Duration, Date) => Date"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "+"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "Date.make(2020, 5, 12) + 20years",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "20years + Date.make(2020, 5, 12)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "smaller",
      "namespace": "Date",
      "requiresNamespace": false,
      "signatures": [
        "(Date, Date) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "<"
      },
      "isUnit": false
    },
    {
      "name": "larger",
      "namespace": "Date",
      "requiresNamespace": false,
      "signatures": [
        "(Date, Date) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": ">"
      },
      "isUnit": false
    },
    {
      "name": "smallerEq",
      "namespace": "Date",
      "requiresNamespace": false,
      "signatures": [
        "(Date, Date) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "<="
      },
      "isUnit": false
    },
    {
      "name": "largerEq",
      "namespace": "Date",
      "requiresNamespace": false,
      "signatures": [
        "(Date, Date) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": ">="
      },
      "isUnit": false
    },
    {
      "name": "rangeDomain",
      "namespace": "Date",
      "requiresNamespace": true,
      "signatures": [
        "(min: Date, min: Date) => Domain"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Date.rangeDomain(Date(2000), Date(2010))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "toList",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict('A)) => List([String, 'A])"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dict.toList({a: 1, b: 2})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromList",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(List([String, 'A])) => Dict('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dict.fromList([\n      [\"foo\", 3],\n      [\"bar\", 20],\n    ]) // {foo: 3, bar: 20}",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "set",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict('A), key: String, value: 'A) => Dict('A)"
      ],
      "isUnit": false,
      "description": "Creates a new dictionary that includes the added element, while leaving the original dictionary unaltered.",
      "examples": [
        {
          "text": "Dict.set({a: 1, b: 2}, \"c\", 3)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "delete",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict('A), key: String) => Dict('A)"
      ],
      "isUnit": false,
      "description": "Creates a new dictionary that excludes the deleted element.",
      "examples": [
        {
          "text": "Dict.delete({a: 1, b: 2}, \"a\")",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "merge",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict(any), Dict(any)) => Dict(any)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "first = { a: 1, b: 2 }\nsnd = { b: 3, c: 5 }\nDict.merge(first, snd)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "mergeMany",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(List(Dict(any))) => Dict(any)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "first = { a: 1, b: 2 }\nsnd = { b: 3, c: 5 }\nDict.mergeMany([first, snd]) // {a: 1, b: 3, c: 5}",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "map",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict('A), fn: ('A) => 'B) => Dict('B)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dict.map({a: 1, b: 2}, {|x| x + 1})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "mapKeys",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict('A), fn: (String) => String) => Dict('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dict.mapKeys({a: 1, b: 2, c: 5}, {|x| concat(x, \"-foobar\")})",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "omit",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict('A), List(String)) => keys: Dict('A)"
      ],
      "isUnit": false,
      "description": "Creates a new dictionary that excludes the omitted keys.",
      "examples": [
        {
          "text": "data = { a: 1, b: 2, c: 3, d: 4 }\nDict.omit(data, [\"b\", \"d\"]) // {a: 1, c: 3}",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "has",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict(any), key: String) => Bool"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dict.has({a: 1, b: 2}, \"c\")",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "size",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict(any)) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dict.size({a: 1, b: 2})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "keys",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict(any)) => List(String)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dict.keys({a: 1, b: 2})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "values",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict('A)) => List('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dict.values({ foo: 3, bar: 20 }) // [3, 20]",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "pick",
      "namespace": "Dict",
      "requiresNamespace": true,
      "signatures": [
        "(Dict('A), keys: List(String)) => Dict('A)"
      ],
      "isUnit": false,
      "description": "Creates a new dictionary that only includes the picked keys.",
      "examples": [
        {
          "text": "data = { a: 1, b: 2, c: 3, d: 4 }\nDict.pick(data, [\"a\", \"c\"]) // {a: 1, c: 3}",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "make",
      "namespace": "Dist",
      "requiresNamespace": true,
      "signatures": [
        "(Dist) => Dist",
        "(Number) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Dist.make(5)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Dist.make(normal({p5: 4, p95: 10}))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "mixture",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(List(Dist|Number), weights?: List(Number)) => Dist",
        "(Dist|Number) => Dist",
        "(Dist|Number, Dist|Number, weights?: [Number, Number]) => Dist",
        "(Dist|Number, Dist|Number, Dist|Number, weights?: [Number, Number, Number]) => Dist",
        "(Dist|Number, Dist|Number, Dist|Number, Dist|Number, weights?: [Number, Number, Number, Number]) => Dist",
        "(Dist|Number, Dist|Number, Dist|Number, Dist|Number, Dist|Number, weights?: [Number, Number, Number, Number, Number]) => Dist"
      ],
      "isUnit": false,
      "description": "The ``mixture`` function takes a list of distributions and a list of weights, and returns a new distribution that is a mixture of the distributions in the list. The weights should be positive numbers that sum to 1. If no weights are provided, the function will assume that all distributions have equal weight.\n    \nNote: If you want to pass in over 5 distributions, you must use the list syntax.",
      "examples": [
        {
          "text": "mixture(1,normal(5,2))",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "mixture(normal(5,2), normal(10,2), normal(15,2), [0.3, 0.5, 0.2])",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "mixture([normal(5,2), normal(10,2), normal(15,2), normal(20,1)], [0.3, 0.5, 0.1, 0.1])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "mx",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(List(Dist|Number), weights?: List(Number)) => Dist",
        "(Dist|Number) => Dist",
        "(Dist|Number, Dist|Number, weights?: [Number, Number]) => Dist",
        "(Dist|Number, Dist|Number, Dist|Number, weights?: [Number, Number, Number]) => Dist",
        "(Dist|Number, Dist|Number, Dist|Number, Dist|Number, weights?: [Number, Number, Number, Number]) => Dist",
        "(Dist|Number, Dist|Number, Dist|Number, Dist|Number, Dist|Number, weights?: [Number, Number, Number, Number, Number]) => Dist"
      ],
      "isUnit": false,
      "description": "Alias for mixture()",
      "examples": [
        {
          "text": "mx(1,normal(5,2))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "normal",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(mean: Dist|Number, stdev: Dist|Number) => SampleSetDist",
        "({p5: Number, p95: Number}) => SampleSetDist",
        "({p10: Number, p90: Number}) => SampleSetDist",
        "({p25: Number, p75: Number}) => SampleSetDist",
        "({mean: Number, stdev: Number}) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "normal(5,1)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "normal({p5: 4, p95: 10})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "normal({p10: 4, p90: 10})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "normal({p25: 4, p75: 10})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "normal({mean: 5, stdev: 2})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "lognormal",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(mu: Dist|Number, sigma: Dist|Number) => SampleSetDist",
        "({p5: Number, p95: Number}) => SampleSetDist",
        "({p10: Number, p90: Number}) => SampleSetDist",
        "({p25: Number, p75: Number}) => SampleSetDist",
        "({mean: Number, stdev: Number}) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "lognormal(0.5, 0.8)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "lognormal({p5: 4, p95: 10})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "lognormal({p10: 4, p90: 10})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "lognormal({p25: 4, p75: 10})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "lognormal({mean: 5, stdev: 2})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "uniform",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(low: Dist|Number, high: Dist|Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "uniform(10, 12)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "beta",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(alpha: Dist|Number, beta: Dist|Number) => SampleSetDist",
        "({mean: Number, stdev: Number}) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "beta(20, 25)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "beta({mean: 0.39, stdev: 0.1})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "cauchy",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(location: Dist|Number, scale: Dist|Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "cauchy(5, 1)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "gamma",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(shape: Dist|Number, scale: Dist|Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "gamma(5, 1)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "logistic",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(location: Dist|Number, scale: Dist|Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "logistic(5, 1)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "to",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(p5: Dist|Number, p95: Dist|Number) => SampleSetDist"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "to"
      },
      "isUnit": false,
      "description": "The \"to\" function is a shorthand for lognormal({p5:min, p95:max}). It does not accept values of 0 or less, as those are not valid for lognormal distributions.",
      "examples": [
        {
          "text": "5 to 10",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "to(5,10)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "exponential",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(rate: Dist|Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "exponential(2)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "bernoulli",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(p: Dist|Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "bernoulli(0.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "triangular",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(min: Number, mode: Number, max: Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "triangular(3, 5, 10)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "mean",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "median",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "stdev",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "variance",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "min",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "max",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "mode",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "sample",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "sampleN",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, n: Number) => List(Number)"
      ],
      "isUnit": false
    },
    {
      "name": "exp",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "cdf",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "pdf",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "inv",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "quantile",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "truncate",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, left: Number, right: Number) => Dist"
      ],
      "isUnit": false,
      "description": "Truncates both the left side and the right side of a distribution.\n\nSample set distributions are truncated by filtering samples, but point set distributions are truncated using direct geometric manipulation. Uniform distributions are truncated symbolically. Symbolic but non-uniform distributions get converted to Point Set distributions."
    },
    {
      "name": "truncateLeft",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "truncateRight",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "add",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "+"
      },
      "isUnit": false
    },
    {
      "name": "multiply",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "*"
      },
      "isUnit": false
    },
    {
      "name": "subtract",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "-"
      },
      "isUnit": false
    },
    {
      "name": "divide",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "/"
      },
      "isUnit": false
    },
    {
      "name": "pow",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "^"
      },
      "isUnit": false
    },
    {
      "name": "log",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "log",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "log10",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "unaryMinus",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Dist"
      ],
      "shorthand": {
        "type": "unary",
        "symbol": "-"
      },
      "isUnit": false
    },
    {
      "name": "sum",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(List(Dist|Number)) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "product",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(List(Dist|Number)) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "cumsum",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(List(Dist|Number)) => List(Dist)"
      ],
      "isUnit": false
    },
    {
      "name": "cumprod",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(List(Dist|Number)) => List(Dist)"
      ],
      "isUnit": false
    },
    {
      "name": "diff",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(List(Dist|Number)) => List(Dist)"
      ],
      "isUnit": false
    },
    {
      "name": "dotAdd",
      "namespace": "Dist",
      "requiresNamespace": true,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "dotMultiply",
      "namespace": "Dist",
      "requiresNamespace": true,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "dotSubtract",
      "namespace": "Dist",
      "requiresNamespace": true,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "dotDivide",
      "namespace": "Dist",
      "requiresNamespace": true,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "dotPow",
      "namespace": "Dist",
      "requiresNamespace": true,
      "signatures": [
        "(Dist, Number) => Dist",
        "(Number, Dist) => Dist",
        "(Dist, Dist) => Dist"
      ],
      "isUnit": false
    },
    {
      "name": "normalize",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Dist"
      ],
      "isUnit": false,
      "description": "Normalize a distribution. This means scaling it appropriately so that it's cumulative sum is equal to 1. This only impacts Point Set distributions, because those are the only ones that can be non-normlized."
    },
    {
      "name": "isNormalized",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Bool"
      ],
      "isUnit": false,
      "description": "Check if a distribution is normalized. This only impacts Point Set distributions, because those are the only ones that can be non-normlized. Most distributions are typically normalized, but there are some commands that could produce non-normalized distributions."
    },
    {
      "name": "integralSum",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist) => Number"
      ],
      "isUnit": false,
      "description": "Get the sum of the integral of a distribution. If the distribution is normalized, this will be 1.0. This is useful for understanding unnormalized distributions."
    },
    {
      "name": "sparkline",
      "namespace": "Dist",
      "requiresNamespace": false,
      "signatures": [
        "(Dist, Number?) => String"
      ],
      "isUnit": false,
      "description": "\nProduce a sparkline of length ``n``. For example, `▁▁▁▁▁▂▄▆▇██▇▆▄▂▁▁▁▁▁`. These can be useful for testing or quick visualizations that can be copied and pasted into text."
    },
    {
      "name": "klDivergence",
      "namespace": "Dist",
      "requiresNamespace": true,
      "signatures": [
        "(Dist, Dist) => Number"
      ],
      "isUnit": false,
      "description": "[Kullback–Leibler divergence](https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence) between two distributions.\n\nNote that this can be very brittle. If the second distribution has probability mass at areas where the first doesn't, then the result will be infinite. Due to numeric approximations, some probability mass in point set distributions is rounded to zero, leading to infinite results with klDivergence.",
      "examples": [
        {
          "text": "Dist.klDivergence(Sym.normal(5,2), Sym.normal(5,1.5))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "logScore",
      "namespace": "Dist",
      "requiresNamespace": true,
      "signatures": [
        "({estimate: Dist, answer: Dist|Number, prior?: Dist}) => Number"
      ],
      "isUnit": false,
      "description": "A log loss score. Often that often acts as a [scoring rule](https://en.wikipedia.org/wiki/Scoring_rule). Useful when evaluating the accuracy of a forecast.\n\n    Note that it is fairly slow.",
      "examples": [
        {
          "text": "Dist.logScore({estimate: Sym.normal(5,2), answer: Sym.normal(5.2,1), prior: Sym.normal(5.5,3)})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Dist.logScore({estimate: Sym.normal(5,2), answer: Sym.normal(5.2,1)})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Dist.logScore({estimate: Sym.normal(5,2), answer: 4.5})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "make",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(Dist) => SampleSetDist",
        "(Number) => SampleSetDist",
        "(List(Number)) => SampleSetDist",
        "((index?: Number) => Number) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "Calls the correct conversion constructor, based on the corresponding input type, to create a sample set distribution",
      "examples": [
        {
          "text": "SampleSet(5)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "SampleSet.make([3,5,2,3,5,2,3,5,2,3,3,5,3,2,3,1,1,3])",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "SampleSet.make({|i| sample(normal(5,2))})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromDist",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(Dist) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "Converts any distribution type into a sample set distribution.",
      "examples": [
        {
          "text": "SampleSet.fromDist(Sym.normal(5,2))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromNumber",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "Convert a number into a sample set distribution that contains ``n`` copies of that number. ``n`` refers to the model sample count.",
      "examples": [
        {
          "text": "SampleSet.fromNumber(3)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromList",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(List(Number)) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "Convert a list of numbers into a sample set distribution.",
      "examples": [
        {
          "text": "SampleSet.fromList([3,5,2,3,5,2,3,5,2,3,3,5,3,2,3,1,1,3])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "toList",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(SampleSetDist) => List(Number)"
      ],
      "isUnit": false,
      "description": "Gets the internal samples of a sampleSet distribution. This is separate from the ``sampleN()`` function, which would shuffle the samples. ``toList()`` maintains order and length.",
      "examples": [
        {
          "text": "SampleSet.toList(SampleSet.fromDist(normal(5,2)))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromFn",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "((index?: Number) => Number) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "Convert a function into a sample set distribution by calling it ``n`` times.",
      "examples": [
        {
          "text": "SampleSet.fromFn({|i| sample(normal(5,2))})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "map",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(SampleSetDist, fn: (Number) => Number) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "Transforms a sample set distribution by applying a function to each sample. Returns a new sample set distribution.",
      "examples": [
        {
          "text": "SampleSet.map(SampleSet.fromDist(normal(5,2)), {|x| x + 1})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "map2",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(SampleSetDist, SampleSetDist, fn: (Number, Number) => Number) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "Transforms two sample set distributions by applying a function to each pair of samples. Returns a new sample set distribution.",
      "examples": [
        {
          "text": "SampleSet.map2(\n  SampleSet.fromDist(normal(5,2)),\n  SampleSet.fromDist(normal(5,2)),\n  {|x, y| x + y}\n)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "map3",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(SampleSetDist, SampleSetDist, SampleSetDist, fn: (Number, Number, Number) => Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "SampleSet.map3(\n  SampleSet.fromDist(normal(5,2)),\n  SampleSet.fromDist(normal(5,2)),\n  SampleSet.fromDist(normal(5,2)),\n  {|x, y, z| max([x,y,z])}\n)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "mapN",
      "namespace": "SampleSet",
      "requiresNamespace": true,
      "signatures": [
        "(List(SampleSetDist), fn: (List(Number)) => Number) => SampleSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "SampleSet.mapN(\n  [\n    SampleSet.fromDist(normal(5,2)),\n    SampleSet.fromDist(normal(5,2)),\n    SampleSet.fromDist(normal(5,2))\n  ],\n  max\n)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "normal",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => SymbolicDist",
        "({p5: Number, p95: Number}) => SymbolicDist",
        "({p10: Number, p90: Number}) => SymbolicDist",
        "({p25: Number, p75: Number}) => SymbolicDist",
        "({mean: Number, stdev: Number}) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.normal(5, 1)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.normal({ p5: 4, p95: 10 })",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.normal({ p10: 4, p90: 10 })",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.normal({ p25: 4, p75: 10 })",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.normal({ mean: 5, stdev: 2 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "lognormal",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => SymbolicDist",
        "({p5: Number, p95: Number}) => SymbolicDist",
        "({p10: Number, p90: Number}) => SymbolicDist",
        "({p25: Number, p75: Number}) => SymbolicDist",
        "({mean: Number, stdev: Number}) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.lognormal(0.5, 0.8)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.lognormal({ p5: 4, p95: 10 })",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.lognormal({ p10: 4, p90: 10 })",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.lognormal({ p25: 4, p75: 10 })",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.lognormal({ mean: 5, stdev: 2 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "uniform",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.uniform(10, 12)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "beta",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => SymbolicDist",
        "({mean: Number, stdev: Number}) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.beta(20, 25)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Sym.beta({ mean: 0.39, stdev: 0.1 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "cauchy",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.cauchy(5, 1)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "gamma",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.gamma(5, 1)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "logistic",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.logistic(5, 1)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "exponential",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.exponential(2)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "bernoulli",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.bernoulli(0.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "pointMass",
      "namespace": "Sym",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => SymbolicDist"
      ],
      "isUnit": false,
      "description": "Point mass distributions are already symbolic, so you can use the regular `pointMass` function.",
      "examples": [
        {
          "text": "pointMass(0.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "triangular",
      "namespace": "Sym",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number, Number) => SymbolicDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Sym.triangular(3, 5, 10)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "make",
      "namespace": "PointSet",
      "requiresNamespace": true,
      "signatures": [
        "(Dist) => PointSetDist",
        "(Number) => PointSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "PointSet.make(normal(5,10))",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "PointSet(3)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "makeContinuous",
      "namespace": "PointSet",
      "requiresNamespace": true,
      "signatures": [
        "(List({x: Number, y: Number})) => PointSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "PointSet.makeContinuous([\n  {x: 0, y: 0.2},\n  {x: 1, y: 0.7},\n  {x: 2, y: 0.8},\n  {x: 3, y: 0.2}\n])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "makeDiscrete",
      "namespace": "PointSet",
      "requiresNamespace": true,
      "signatures": [
        "(List({x: Number, y: Number})) => PointSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "PointSet.makeDiscrete([\n  {x: 0, y: 0.2},\n  {x: 1, y: 0.7},\n  {x: 2, y: 0.8},\n  {x: 3, y: 0.2}\n])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromDist",
      "namespace": "PointSet",
      "requiresNamespace": true,
      "signatures": [
        "(Dist) => PointSetDist"
      ],
      "isUnit": false,
      "description": "Converts the distribution in question into a point set distribution. If the distribution is symbolic, then it does this by taking the quantiles. If the distribution is a sample set, then it uses a version of kernel density estimation to approximate the point set format. One complication of this latter process is that if there is a high proportion of overlapping samples (samples that are exactly the same as each other), it will convert these samples into discrete point masses. Eventually we'd like to add further methods to help adjust this process.",
      "examples": [
        {
          "text": "PointSet.fromDist(normal(5,2))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromNumber",
      "namespace": "PointSet",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => PointSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "PointSet.fromNumber(3)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "downsample",
      "namespace": "PointSet",
      "requiresNamespace": true,
      "signatures": [
        "(PointSetDist, newLength: Number) => PointSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "PointSet.downsample(PointSet.fromDist(normal(5,2)), 50)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "support",
      "namespace": "PointSet",
      "requiresNamespace": true,
      "signatures": [
        "(PointSetDist) => {points: List(Number), segments: List([Number, Number])}"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "PointSet.support(PointSet.fromDist(normal(5,2)))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "mapY",
      "namespace": "PointSet",
      "requiresNamespace": true,
      "signatures": [
        "(PointSetDist, fn: (Number) => Number) => PointSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "PointSet.mapY(mx(Sym.normal(5,2)), {|x| x + 1})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromMinutes",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Duration"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Duration.fromMinutes(5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromHours",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Duration"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Duration.fromHours(5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromDays",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Duration"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Duration.fromDays(5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "fromYears",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Duration"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Duration.fromYears(5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "toMinutes",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Duration.toMinutes(5minutes)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "toHours",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Duration.toHours(5minutes)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "toDays",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Duration.toDays(5minutes)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "toYears",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Duration.toYears(5minutes)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "unaryMinus",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration) => Duration"
      ],
      "shorthand": {
        "type": "unary",
        "symbol": "-"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "-5minutes",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "add",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Duration) => Duration"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "+"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "5minutes + 10minutes",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "subtract",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Duration) => Duration"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "-"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "5minutes - 10minutes",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "multiply",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Number) => Duration",
        "(Number, Duration) => Duration"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "*"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "5minutes * 10",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "10 * 5minutes",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "divide",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Duration) => Number"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "/"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "5minutes / 2minutes",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "divide",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Duration) => Number"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "/"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "5minutes / 2minutes",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "smaller",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Duration) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "<"
      },
      "isUnit": false
    },
    {
      "name": "larger",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Duration) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": ">"
      },
      "isUnit": false
    },
    {
      "name": "smallerEq",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Duration) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "<="
      },
      "isUnit": false
    },
    {
      "name": "largerEq",
      "namespace": "Duration",
      "requiresNamespace": false,
      "signatures": [
        "(Duration, Duration) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": ">="
      },
      "isUnit": false
    },
    {
      "name": "make",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(count: Number, fn: (index?: Number) => 'A) => List('A)",
        "(count: Number, value: 'A) => List('A)",
        "(SampleSetDist) => List(Number)"
      ],
      "isUnit": false,
      "description": "Creates an array of length `count`, with each element being `value`. If `value` is a function, it will be called `count` times, with the index as the argument.",
      "examples": [
        {
          "text": "List.make(2, 3)",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "List.make(2, {|| 3})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "List.make(2, {|index| index+1})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "upTo",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(low: Number, high: Number) => List(Number)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.upTo(1,4)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "reverse",
      "namespace": "List",
      "requiresNamespace": false,
      "signatures": [
        "(List('A)) => List('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.reverse([1,4,5]) // [5,4,1]",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "concat",
      "namespace": "List",
      "requiresNamespace": false,
      "signatures": [
        "(List('A), List('A)) => List('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.concat([1,2,3], [4, 5, 6])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "sortBy",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), fn: ('A) => Number) => List('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.sortBy([{a:3}, {a:1}], {|f| f.a})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "append",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), 'A) => List('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.append([1,4],5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "join",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List(String), separator?: String) => String",
        "(List(String)) => String"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.join([\"a\", \"b\", \"c\"], \",\") // \"a,b,c\"",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "flatten",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List(any)) => List(any)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.flatten([[1,2], [3,4]])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "shuffle",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A)) => List('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.shuffle([1,3,4,20])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "zip",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), List('B)) => List(['A, 'B])"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.zip([1,3,4,20], [2,4,5,6])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "unzip",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List(['A, 'B])) => [List('A), List('B)]"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.unzip([[1,2], [2,3], [4,5]])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "slice",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), startIndex: Number, endIndex?: Number) => List('A)"
      ],
      "isUnit": false,
      "description": "Returns a copy of the list, between the selected ``start`` and ``end``, end not included. Directly uses the [Javascript implementation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) underneath.",
      "examples": [
        {
          "text": "List.slice([1,2,5,10],1,3)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "uniq",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A)) => List('A)"
      ],
      "isUnit": false,
      "description": "Filters the list for unique elements. Works on select Squiggle types.",
      "examples": [
        {
          "text": "List.uniq([1,2,3,\"hi\",false,\"hi\"])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "uniqBy",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), ('A) => 'B) => List('A)"
      ],
      "isUnit": false,
      "description": "Filters the list for unique elements. Works on select Squiggle types.",
      "examples": [
        {
          "text": "List.uniqBy([[1,5], [3,5], [5,7]], {|x| x[1]})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "filter",
      "namespace": "List",
      "requiresNamespace": false,
      "signatures": [
        "(List('A), fn: ('A) => Bool) => List('A)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.filter([1,4,5], {|x| x>3})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "length",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List(any)) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.length([1,4,5])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "first",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A)) => 'A"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.first([1,4,5])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "last",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A)) => 'A"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.last([1,4,5])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "minBy",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), fn: ('A) => Number) => 'A"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.minBy([{a:3}, {a:1}], {|f| f.a})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "maxBy",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), fn: ('A) => Number) => 'A"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.maxBy([{a:3}, {a:1}], {|f| f.a})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "every",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), fn: ('A) => Bool) => Bool"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.every([1,4,5], {|el| el>3 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "some",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), fn: ('A) => Bool) => Bool"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.some([1,4,5], {|el| el>3 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "find",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), fn: ('A) => Bool) => 'A"
      ],
      "isUnit": false,
      "description": "Returns an error if there is no value found",
      "examples": [
        {
          "text": "List.find([1,4,5], {|el| el>3 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "findIndex",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), fn: ('A) => Bool) => Number"
      ],
      "isUnit": false,
      "description": "Returns `-1` if there is no value found",
      "examples": [
        {
          "text": "List.findIndex([1,4,5], {|el| el>3 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "map",
      "namespace": "List",
      "requiresNamespace": false,
      "signatures": [
        "(List('A), ('A, index?: Number) => 'B) => List('B)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "List.map([1,4,5], {|x| x+1})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "List.map([1,4,5], {|x,i| x+i+1})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "reduce",
      "namespace": "List",
      "requiresNamespace": false,
      "signatures": [
        "(List('B), initialValue: 'A, callbackFn: (accumulator: 'A, currentValue: 'B, currentIndex?: Number) => 'A) => 'A"
      ],
      "isUnit": false,
      "description": "Applies `f` to each element of `arr`. The function `f` has two main paramaters, an accumulator and the next value from the array. It can also accept an optional third `index` parameter.",
      "examples": [
        {
          "text": "List.reduce([1,4,5], 2, {|acc, el| acc+el})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "reduceReverse",
      "namespace": "List",
      "requiresNamespace": false,
      "signatures": [
        "(List('B), initialValue: 'A, callbackFn: (accumulator: 'A, currentValue: 'B) => 'A) => 'A"
      ],
      "isUnit": false,
      "description": "Works like `reduce`, but the function is applied to each item from the last back to the first.",
      "examples": [
        {
          "text": "List.reduceReverse([1,4,5], 2, {|acc, el| acc-el})",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "reduceWhile",
      "namespace": "List",
      "requiresNamespace": true,
      "signatures": [
        "(List('B), initialValue: 'A, callbackFn: (accumulator: 'A, currentValue: 'B) => 'A, conditionFn: ('A) => Bool) => 'A"
      ],
      "isUnit": false,
      "description": "Works like `reduce`, but stops when the condition is no longer met. This is useful, in part, for simulating processes that need to stop based on the process state.\n    ",
      "examples": [
        {
          "text": "// Adds first two elements, returns `11`.\nList.reduceWhile([5, 6, 7], 0, {|acc, curr| acc + curr}, {|acc| acc < 15})\n",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "// Adds first two elements, returns `{ x: 11 }`.\nList.reduceWhile(\n  [5, 6, 7],\n  { x: 0 },\n  {|acc, curr| { x: acc.x + curr }},\n  {|acc| acc.x < 15}\n)\n",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "sqrt",
      "namespace": "Math",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "sin",
      "namespace": "Math",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "cos",
      "namespace": "Math",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "tan",
      "namespace": "Math",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "asin",
      "namespace": "Math",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "acos",
      "namespace": "Math",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "atan",
      "namespace": "Math",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false
    },
    {
      "name": "difference",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}, {points: List(Number), segments: List([Number, Number])}) => {points: List(Number), segments: List([Number, Number])}"
      ],
      "isUnit": false
    },
    {
      "name": "intersection",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}, {points: List(Number), segments: List([Number, Number])}) => {points: List(Number), segments: List([Number, Number])}"
      ],
      "isUnit": false
    },
    {
      "name": "union",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}, {points: List(Number), segments: List([Number, Number])}) => {points: List(Number), segments: List([Number, Number])}"
      ],
      "isUnit": false
    },
    {
      "name": "isSubsetOf",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}, {points: List(Number), segments: List([Number, Number])}) => Bool"
      ],
      "isUnit": false
    },
    {
      "name": "isSupersetOf",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}, {points: List(Number), segments: List([Number, Number])}) => Bool"
      ],
      "isUnit": false
    },
    {
      "name": "isEqual",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}, {points: List(Number), segments: List([Number, Number])}) => Bool"
      ],
      "isUnit": false
    },
    {
      "name": "isEmpty",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}) => Bool"
      ],
      "isUnit": false
    },
    {
      "name": "min",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}) => Number"
      ],
      "isUnit": false,
      "description": "Returns the minimum value in the set"
    },
    {
      "name": "max",
      "namespace": "MixedSet",
      "requiresNamespace": true,
      "signatures": [
        "({points: List(Number), segments: List([Number, Number])}) => Number"
      ],
      "isUnit": false,
      "description": "Returns the maximum value in the set"
    },
    {
      "name": "dist",
      "namespace": "Plot",
      "requiresNamespace": true,
      "signatures": [
        "(dist: Dist, params?: {xScale?: Scale, yScale?: Scale, showSummary?: Bool}) => Plot"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Plot.dist(\n  normal(5, 2),\n  {\n    xScale: Scale.linear({ min: -2, max: 6, title: \"X Axis Title\" }),\n    showSummary: true,\n  }\n)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "dists",
      "namespace": "Plot",
      "requiresNamespace": true,
      "signatures": [
        "(dists: List(Dist|Number)|List({name?: String, value: Dist|Number}), {xScale?: Scale, yScale?: Scale, showSummary?: Bool}?) => Plot"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Plot.dists(\n{\n  dists: [\n    { name: \"First Dist\", value: normal(0, 1) },\n    { name: \"Second Dist\", value: uniform(2, 4) },\n  ],\n  xScale: Scale.symlog({ min: -2, max: 5 }),\n}\n)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "numericFn",
      "namespace": "Plot",
      "requiresNamespace": true,
      "signatures": [
        "(fn: (Number) => Number, params?: {xScale?: Scale, yScale?: Scale, xPoints?: List(Number)}) => Plot"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Plot.numericFn(\n  {|t|t ^ 2},\n  { xScale: Scale.log({ min: 1, max: 100 }), points: 10 }\n)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "distFn",
      "namespace": "Plot",
      "requiresNamespace": true,
      "signatures": [
        "(fn: (Number) => Dist, params?: {xScale?: Scale, yScale?: Scale, distXScale?: Scale, xPoints?: List(Number)}) => Plot"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Plot.distFn(\n  {|t|normal(t, 2) * normal(5, 3)},\n  {\n    xScale: Scale.log({ min: 3, max: 100, title: \"Time (years)\" }),\n    yScale: Scale.linear({ title: \"Value\" }),\n    distXScale: Scale.linear({ tickFormat: \"#x\" }),\n  }\n)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "scatter",
      "namespace": "Plot",
      "requiresNamespace": true,
      "signatures": [
        "({xDist: SampleSetDist, yDist: SampleSetDist, xScale?: Scale, yScale?: Scale}) => Plot"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "xDist = SampleSet.fromDist(2 to 5)\nyDist = normal({p5:-3, p95:3}) * 5 - xDist ^ 2\nPlot.scatter({\n  xDist: xDist,\n  yDist: yDist,\n  xScale: Scale.log({min: 1.5}),\n})",
          "isInteractive": true,
          "useForTests": true
        },
        {
          "text": "xDist = SampleSet.fromDist(normal({p5:-2, p95:5}))\nyDist = normal({p5:-3, p95:3}) * 5 - xDist\nPlot.scatter({\n  xDist: xDist,\n  yDist: yDist,\n  xScale: Scale.symlog({title: \"X Axis Title\"}),\n  yScale: Scale.symlog({title: \"Y Axis Title\"}),\n})",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "smaller",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "<"
      },
      "isUnit": false
    },
    {
      "name": "larger",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": ">"
      },
      "isUnit": false
    },
    {
      "name": "smallerEq",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "<="
      },
      "isUnit": false
    },
    {
      "name": "largerEq",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Bool"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": ">="
      },
      "isUnit": false
    },
    {
      "name": "add",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Number"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "+"
      },
      "isUnit": false
    },
    {
      "name": "subtract",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Number"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "-"
      },
      "isUnit": false
    },
    {
      "name": "multiply",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Number"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "*"
      },
      "isUnit": false
    },
    {
      "name": "divide",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Number"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "/"
      },
      "isUnit": false
    },
    {
      "name": "pow",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number, Number) => Number"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "^"
      },
      "isUnit": false
    },
    {
      "name": "unaryMinus",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "shorthand": {
        "type": "unary",
        "symbol": "-"
      },
      "isUnit": false,
      "examples": [
        {
          "text": "exp(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "exp",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "description": "exponent",
      "examples": [
        {
          "text": "exp(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "log",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "log(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "log10",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "log10(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "log2",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "log2(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "floor",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "floor(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "ceil",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "ceil(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "abs",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "description": "absolute value",
      "examples": [
        {
          "text": "abs(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "round",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "round(3.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "sum",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "sum([3,5,2])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "product",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "product([3,5,2])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "cumprod",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => List(Number)"
      ],
      "isUnit": false,
      "description": "cumulative product",
      "examples": [
        {
          "text": "cumprod([3,5,2,3,5])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "diff",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => List(Number)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "diff([3,5,2,3,5])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "min",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number",
        "(Number, Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "min([3,5,2])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "max",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number",
        "(Number, Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "max([3,5,2])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "mean",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "mean([3,5,2])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "quantile",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number), Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "quantile([1,5,10,40,2,4], 0.3)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "median",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "median([1,5,10,40,2,4])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "geomean",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number"
      ],
      "isUnit": false,
      "description": "geometric mean",
      "examples": [
        {
          "text": "geomean([3,5,2])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "stdev",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number"
      ],
      "isUnit": false,
      "description": "standard deviation",
      "examples": [
        {
          "text": "stdev([3,5,2,3,5])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "variance",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "variance([3,5,2,3,5])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "sort",
      "namespace": "Number",
      "requiresNamespace": false,
      "signatures": [
        "(List(Number)) => List(Number)"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "sort([3,5,2,3,5])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "rangeDomain",
      "namespace": "Number",
      "requiresNamespace": true,
      "signatures": [
        "(min: Number, max: Number) => Domain"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Number.rangeDomain(5, 10)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "linear",
      "namespace": "Scale",
      "requiresNamespace": true,
      "signatures": [
        "({min?: Number, max?: Number, tickFormat?: String, title?: String}) => Scale",
        "() => Scale"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Scale.linear({ min: 3, max: 10 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "log",
      "namespace": "Scale",
      "requiresNamespace": true,
      "signatures": [
        "({min?: Number, max?: Number, tickFormat?: String, title?: String}) => Scale",
        "() => Scale"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Scale.log({ min: 1, max: 100 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "symlog",
      "namespace": "Scale",
      "requiresNamespace": true,
      "signatures": [
        "({min?: Number, max?: Number, tickFormat?: String, title?: String, constant?: Number}) => Scale",
        "() => Scale"
      ],
      "isUnit": false,
      "description": "Symmetric log scale. Useful for plotting data that includes zero or negative values.\n\nThe function accepts an additional `constant` parameter, used as follows: `Scale.symlog({constant: 0.1})`. This parameter allows you to allocate more pixel space to data with lower or higher absolute values. By adjusting this constant, you effectively control the scale's focus, shifting it between smaller and larger values. For more detailed information on this parameter, refer to the [D3 Documentation](https://d3js.org/d3-scale/symlog).\n    \nThe default value for `constant` is `0.0001`.",
      "examples": [
        {
          "text": "Scale.symlog({ min: -10, max: 10 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "power",
      "namespace": "Scale",
      "requiresNamespace": true,
      "signatures": [
        "({min?: Number, max?: Number, tickFormat?: String, title?: String, exponent?: Number}) => Scale",
        "() => Scale"
      ],
      "isUnit": false,
      "description": "Power scale. Accepts an extra `exponent` parameter, like, `Scale.power({exponent: 2, min: 0, max: 100})`.\n\nThe default value for `exponent` is `0.1`.",
      "examples": [
        {
          "text": "Scale.power({ min: 1, max: 100, exponent: 0.1 })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "date",
      "namespace": "Scale",
      "requiresNamespace": true,
      "signatures": [
        "({min?: Date, max?: Date, tickFormat?: String, title?: String}) => Scale",
        "() => Scale"
      ],
      "isUnit": false,
      "description": "Only works on Date values. Is a linear scale under the hood.",
      "examples": [
        {
          "text": "Scale.date({ min: Date(2022), max: Date(2025) })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "make",
      "namespace": "Spec",
      "requiresNamespace": true,
      "signatures": [
        "({name: String, documentation: String, validate: Function}) => Specification"
      ],
      "isUnit": false,
      "description": "Create a specification.",
      "examples": [
        {
          "text": "@startClosed\nvalidate(fn) = {\n  hasErrors = List.upTo(2020, 2030)\n    -> List.some(\n      {|e| typeOf(fn(Date(e))) != \"Distribution\"}\n    )\n  hasErrors ? \"Some results aren't distributions\" : \"\"\n}\n\nspec = Spec.make(\n  {\n    name: \"Stock market over time\",\n    documentation: \"A distribution of stock market values over time.\",\n    validate: validate,\n  }\n)\n\n@spec(spec)\nmyEstimate(t: [Date(2020), Date(2030)]) = normal(10, 3)",
          "isInteractive": true,
          "useForTests": false
        }
      ]
    },
    {
      "name": "make",
      "namespace": "String",
      "requiresNamespace": true,
      "signatures": [
        "(any) => String"
      ],
      "isUnit": false,
      "description": "Converts any value to a string. Some information is often lost."
    },
    {
      "name": "concat",
      "namespace": "String",
      "requiresNamespace": false,
      "signatures": [
        "(String, String) => String",
        "(String, any) => String"
      ],
      "isUnit": false
    },
    {
      "name": "add",
      "namespace": "String",
      "requiresNamespace": false,
      "signatures": [
        "(String, String) => String",
        "(String, any) => String"
      ],
      "shorthand": {
        "type": "infix",
        "symbol": "+"
      },
      "isUnit": false
    },
    {
      "name": "split",
      "namespace": "String",
      "requiresNamespace": true,
      "signatures": [
        "(String, separator: String) => List(String)"
      ],
      "isUnit": false
    },
    {
      "name": "make",
      "namespace": "Table",
      "requiresNamespace": true,
      "signatures": [
        "(data: List('A), params: {columns: List({fn: ('A) => any, name?: String})}) => Table"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Table.make(\n  [\n    { name: \"First Dist\", value: normal(0, 1) },\n    { name: \"Second Dist\", value: uniform(2, 4) },\n    { name: \"Third Dist\", value: uniform(5, 6) },\n  ],\n  {\n    columns: [\n      { name: \"Name\", fn: {|d|d.name} },\n      { name: \"Mean\", fn: {|d|mean(d.value)} },\n      { name: \"Std Dev\", fn: {|d|variance(d.value)} },\n      { name: \"Dist\", fn: {|d|d.value} },\n    ],\n  }\n)",
          "isInteractive": true,
          "useForTests": true
        },
        {
          "text": "Table.make(\n  [\n    { name: \"First Dist\", value: Sym.lognormal({ p5: 1, p95: 10 }) },\n    { name: \"Second Dist\", value: Sym.lognormal({ p5: 5, p95: 30 }) },\n    { name: \"Third Dist\", value: Sym.lognormal({ p5: 50, p95: 90 }) },\n  ],\n  {\n    columns: [\n      { name: \"Name\", fn: {|d|d.name} },\n      {\n        name: \"Plot\",\n        fn: {\n          |d|\n          Plot.dist(\n            {\n              dist: d.value,\n              xScale: Scale.log({ min: 0.5, max: 100 }),\n              showSummary: false,\n            }\n          )\n        },\n      },\n    ],\n  }\n)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "sampleCount",
      "namespace": "System",
      "requiresNamespace": true,
      "signatures": [
        "() => Number"
      ],
      "isUnit": false,
      "description": "The number of samples set in the current environment. This variable can be modified in the Squiggle playground settings."
    },
    {
      "name": "name",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A, String) => 'A"
      ],
      "isUnit": false,
      "description": "Adds a user-facing name to a value. This is useful for documenting what a value represents, or how it was calculated.\n\n*Note: While names are shown in the sidebar, you still need to call variables by their regular variable names in code.*"
    },
    {
      "name": "getName",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => String"
      ],
      "isUnit": false
    },
    {
      "name": "doc",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A, String) => 'A"
      ],
      "isUnit": false,
      "description": "Adds text documentation to a value. This is useful for documenting what a value represents or how it was calculated."
    },
    {
      "name": "getDoc",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => String"
      ],
      "isUnit": false
    },
    {
      "name": "showAs",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(Dist, Plot|(Dist) => Plot) => Dist",
        "(List(any), Table|(List(any)) => Table) => List(any)",
        "((Number) => Dist|Number, Plot|Calculator|((Number) => Dist|Number) => Plot|Calculator) => (Number) => Dist|Number",
        "((Date) => Dist|Number, Plot|Calculator|((Date) => Dist|Number) => Plot|Calculator) => (Date) => Dist|Number",
        "((Duration) => Dist|Number, Plot|Calculator|((Duration) => Dist|Number) => Plot|Calculator) => (Duration) => Dist|Number",
        "(Function, Calculator|(Function) => Calculator) => Function"
      ],
      "isUnit": false,
      "description": "Overrides the default visualization for a value.\n`showAs()` can take either a visualization, or a function that calls the value and returns a visualization.\n\nDifferent types of values can be displayed in different ways. The following table shows the potential visualization types for each input type. In this table, `Number` can be used with Dates and Durations as well.  \n| **Input Type**                      | **Visualization Types**               |\n| ----------------------------------- | ------------------------------------- |\n| **Distribution**                    | `Plot.dist`                         |\n| **List**                            | `Table`                             |\n| **`(Number -> Number)` Function** | `Plot.numericFn`, `Calculator`    |\n| **`(Number -> Dist)` Function**   | `Plot.distFn`, `Calculator`       |\n| **Function**                        | `Calculator`                        |\n",
      "examples": [
        {
          "text": "example1 = ({|x| x + 1}) -> Tag.showAs(Calculator)\n@showAs({|f| Plot.numericFn(f, { xScale: Scale.symlog() })})\nexample2 = {|x| x + 1}",
          "isInteractive": true,
          "useForTests": false
        }
      ]
    },
    {
      "name": "getShowAs",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => any"
      ],
      "isUnit": false
    },
    {
      "name": "getExportData",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => any"
      ],
      "isUnit": false
    },
    {
      "name": "spec",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A, Specification) => 'A"
      ],
      "isUnit": false,
      "description": "Adds a specification to a value. This is useful for documenting how a value was calculated, or what it represents."
    },
    {
      "name": "getSpec",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => any"
      ],
      "isUnit": false
    },
    {
      "name": "format",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(Dist|Number, numberFormat: String) => Dist|Number",
        "(Duration, numberFormat: String) => Duration",
        "(Date, timeFormat: String) => Date"
      ],
      "isUnit": false,
      "description": "Set the display format for a number, distribution, duration, or date. Uses the [d3-format](https://d3js.org/d3-format) syntax on numbers and distributions, and the [d3-time-format](https://d3js.org/d3-time-format) syntax for dates."
    },
    {
      "name": "getFormat",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(Dist|Number) => String",
        "(Duration) => String",
        "(Date) => String"
      ],
      "isUnit": false,
      "examples": []
    },
    {
      "name": "hide",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A, Bool) => 'A",
        "('A) => 'A"
      ],
      "isUnit": false,
      "description": "Hides a value when displayed under Variables. This is useful for hiding intermediate values or helper functions that are used in calculations, but are not directly relevant to the user. Only hides top-level variables."
    },
    {
      "name": "getHide",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => Bool"
      ],
      "isUnit": false
    },
    {
      "name": "startOpen",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A) => 'A"
      ],
      "isUnit": false,
      "description": "When the value is first displayed, it will begin open in the viewer. Refresh the page to reset."
    },
    {
      "name": "startClosed",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A) => 'A"
      ],
      "isUnit": false,
      "description": "When the value is first displayed, it will begin collapsed in the viewer. Refresh the page to reset."
    },
    {
      "name": "getStartOpenState",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => String"
      ],
      "isUnit": false,
      "description": "Returns the startOpenState of a value, which can be \"open\", \"closed\", or \"\" if no startOpenState is set. Set using `Tag.startOpen` and `Tag.startClosed`."
    },
    {
      "name": "notebook",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), Bool) => List('A)",
        "(List('A)) => List('A)"
      ],
      "isUnit": false,
      "description": "Displays the list of values as a notebook. This means that element indices are hidden, and the values are displayed in a vertical list. Useful for displaying combinations of text and values.",
      "examples": [
        {
          "text": "Calculator.make(\n  {|f, contents| f ? Tag.notebook(contents) : contents},\n  {\n    description: \"Shows the contents as a notebook if the checkbox is checked.\",\n    inputs: [\n      Input.checkbox({ name: \"Show as Notebook\", default: true }),\n      Input.textArea(\n        {\n          name: \"Contents to show\",\n          default: \"[\n  \\\"## Distribution 1\\\",\n  normal(5, 2),\n  \\\"## Distribution 1\\\",\n  normal(20, 1),\n  \\\"This is an opening section. Here is more text.\n\\\",\n]\",\n        }\n      ),\n    ],\n  }\n)",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "getNotebook",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => Bool"
      ],
      "isUnit": false
    },
    {
      "name": "location",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A) => 'A"
      ],
      "isUnit": false,
      "description": "Saves the location of a value. Note that this must be called at the point where the location is to be saved. If you use it in a helper function, it will save the location of the helper function, not the location where the helper function is called."
    },
    {
      "name": "getLocation",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => any"
      ],
      "isUnit": false
    },
    {
      "name": "getAll",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "(any) => Dict(any)"
      ],
      "isUnit": false,
      "description": "Returns a dictionary of all tags on a value."
    },
    {
      "name": "omit",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A, List(String)) => 'A"
      ],
      "isUnit": false,
      "description": "Returns a copy of the value with the specified tags removed."
    },
    {
      "name": "clear",
      "namespace": "Tag",
      "requiresNamespace": true,
      "signatures": [
        "('A) => 'A"
      ],
      "isUnit": false,
      "description": "Returns a copy of the value with all tags removed."
    },
    {
      "name": "make",
      "namespace": "Calculator",
      "requiresNamespace": true,
      "signatures": [
        "({fn: Function, title?: String, description?: String, inputs?: List(Input), autorun?: Bool, sampleCount?: Number}) => Calculator",
        "(Function, params?: {title?: String, description?: String, inputs?: List(Input), autorun?: Bool, sampleCount?: Number}) => Calculator"
      ],
      "isUnit": false,
      "description": "\n`Calculator.make` takes in a function, a description, and a list of inputs. The function should take in the same number of arguments as the number of inputs, and the arguments should be of the same type as the default value of the input.\n\nInputs are created using the `Input` module. The Input module has a few different functions for creating different types of inputs.\n    \nFor calculators that take a long time to run, we recommend setting `autorun` to `false`. This will create a button that the user can click to run the calculator.\n    ",
      "examples": [
        {
          "text": "Calculator.make(\n{|text, textArea, select, checkbox| text + textArea},\n{\n  title: \"My example calculator\",\n  inputs: [\n    Input.text({ name: \"text\", default: \"20\" }),\n    Input.textArea({ name: \"textArea\", default: \"50 to 80\" }),\n    Input.select({ name: \"select\", default: \"second\", options: [\"first\", \"second\", \"third\"] }),\n    Input.checkbox({ name: \"checkbox\", default: true }),\n  ],\n  sampleCount: 10k,\n})",
          "isInteractive": true,
          "useForTests": true
        },
        {
          "text": "// When a calculator is created with only a function, it will guess the inputs based on the function's parameters. It won't provide default values if it's a user-written function.\n\n({|x| x * 5}) -> Calculator",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "text",
      "namespace": "Input",
      "requiresNamespace": true,
      "signatures": [
        "({name: String, description?: String, default?: Number|String}) => Input"
      ],
      "isUnit": false,
      "description": "Creates a single-line input. This input can be used for all Squiggle types.",
      "examples": [
        {
          "text": "Input.text({ name: \"First\", default: \"John\" })",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Input.text({ name: \"Number of X in Y\", default: '20 to 300' })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "textArea",
      "namespace": "Input",
      "requiresNamespace": true,
      "signatures": [
        "({name: String, description?: String, default?: Number|String}) => Input"
      ],
      "isUnit": false,
      "description": "Creates a multi-line input, sized with the provided input. This input can be used for all Squiggle types.",
      "examples": [
        {
          "text": "Input.textArea({ name: \"people\", default: '{\n  \"John\": 20 to 50, \n  \"Mary\": 30 to 90,\n}' })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "checkbox",
      "namespace": "Input",
      "requiresNamespace": true,
      "signatures": [
        "({name: String, description?: String, default?: Bool}) => Input"
      ],
      "isUnit": false,
      "description": "Creates a checkbox input. Used for Squiggle booleans.",
      "examples": [
        {
          "text": "Input.checkbox({ name: \"IsTrue?\", default: true })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "select",
      "namespace": "Input",
      "requiresNamespace": true,
      "signatures": [
        "({name: String, description?: String, options: List(String), default?: String}) => Input"
      ],
      "isUnit": false,
      "description": "Creates a dropdown input. Used for Squiggle strings.",
      "examples": [
        {
          "text": "Input.select({ name: \"Name\", default: \"Sue\", options: [\"John\", \"Mary\", \"Sue\"] })",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "gridPlot",
      "namespace": "RelativeValues",
      "requiresNamespace": true,
      "signatures": [
        "({ids: List(String), fn: (String, String) => List(Number)}) => Plot"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "RelativeValues.gridPlot({\n  ids: [\"foo\", \"bar\"],\n  fn: {|id1, id2| [SampleSet.fromDist(2 to 5), SampleSet.fromDist(3 to 6)]},\n})",
          "isInteractive": true,
          "useForTests": true
        }
      ]
    },
    {
      "name": "json",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(any) => any"
      ],
      "isUnit": false,
      "description": "Converts a value to a simpler form, similar to JSON. This is useful for debugging. Keeps functions and dates, but converts objects like distributions, calculators, and plots to combinations of dictionaries and lists.",
      "examples": [
        {
          "text": "Danger.json({a: 1, b: 2})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Danger.json([2 to 5, Sym.normal(5, 2), Calculator({|x| x + 1})])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "jsonString",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(any) => String"
      ],
      "isUnit": false,
      "description": "Converts a value to a stringified JSON, similar to JSON.stringify() in Javasript. Replaces functions with dict summaries.",
      "examples": [
        {
          "text": "Danger.jsonString({a: 1, b: 2})",
          "isInteractive": false,
          "useForTests": true
        },
        {
          "text": "Danger.jsonString([2 to 5, Sym.normal(5, 2), Calculator({|x| x + 1})])",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "parseFloat",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(String) => Number|String"
      ],
      "isUnit": false,
      "description": "Converts a string to a number. If the string can't be converted, returns `Parse Failed`. Calls Javascript `parseFloat` under the hood.",
      "examples": [
        {
          "text": "Danger.parseFloat('10.3')",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "now",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "() => Date"
      ],
      "isUnit": false,
      "description": "Returns the current date. Internally calls ``Date.now()`` in JavaScript.  \n\n*Caution: This function, which returns the current date, produces varying outputs with each call. As a result, accurately estimating the value of functions that incorporate ``Danger.now()`` at past time points is challenging. In the future, we intend to implement a feature allowing the input of a simulated time via an environment variable to address this issue.*",
      "examples": [
        {
          "text": "Danger.now()",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "laplace",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => Number"
      ],
      "isUnit": false,
      "description": "Calculates the probability implied by [Laplace's rule of succession](https://en.wikipedia.org/wiki/Rule_of_succession)",
      "examples": [
        {
          "text": "trials = 10\nsuccesses = 1\nDanger.laplace(successes, trials) //  (successes + 1) / (trials + 2)  = 2 / 12 = 0.1666",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "yTransform",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(PointSetDist) => PointSetDist"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Danger.yTransform(PointSet(Sym.normal(5,2)))",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "factorial",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(Number) => Number"
      ],
      "isUnit": false,
      "examples": [
        {
          "text": "Danger.factorial(20)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "choose",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number) => Number"
      ],
      "isUnit": false,
      "description": "`Danger.choose(n,k)` returns `factorial(n) / (factorial(n - k) * factorial(k))`, i.e., the number of ways you can choose k items from n choices, without repetition. This function is also known as the [binomial coefficient](https://en.wikipedia.org/wiki/Binomial_coefficient).",
      "examples": [
        {
          "text": "Danger.choose(1, 20)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "binomial",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(Number, Number, Number) => Number"
      ],
      "isUnit": false,
      "description": "`Danger.binomial(n, k, p)` returns `choose((n, k)) * pow(p, k) * pow(1 - p, n - k)`, i.e., the probability that an event of probability p will happen exactly k times in n draws.",
      "examples": [
        {
          "text": "Danger.binomial(1, 20, 0.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "combinations",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(List('A), Number) => List(List('A))"
      ],
      "isUnit": false,
      "description": "Returns all combinations of the input list taken r elements at a time.",
      "examples": [
        {
          "text": "Danger.combinations([1, 2, 3], 2) // [[1, 2], [1, 3], [2, 3]]",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "allCombinations",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(List('A)) => List(List('A))"
      ],
      "isUnit": false,
      "description": "Returns all possible combinations of the elements in the input list.",
      "examples": [
        {
          "text": "Danger.allCombinations([1, 2, 3]) // [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "binomialDist",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(numberOfTrials: Dist|Number, probabilityOfSuccess: Dist|Number) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "A binomial distribution.\n\n``n`` must be above 0, and ``p`` must be between 0 and 1. \n\nNote: The binomial distribution is a discrete distribution. When representing this, the Squiggle distribution component might show it as partially or fully continuous. This is a visual mistake; if you inspect the underlying data, it should be discrete.",
      "examples": [
        {
          "text": "Danger.binomialDist(8, 0.5)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "poissonDist",
      "namespace": "Danger",
      "requiresNamespace": true,
      "signatures": [
        "(rate: Dist|Number) => SampleSetDist"
      ],
      "isUnit": false,
      "description": "A Poisson distribution.\n\nNote: The Poisson distribution is a discrete distribution. When representing this, the Squiggle distribution component might show it as partially or fully continuous.  This is a visual mistake; if you inspect the underlying data, it should be discrete.",
      "examples": [
        {
          "text": "Danger.poissonDist(10)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "integrateFunctionBetweenWithNumIntegrationPoints",
      "namespace": "Danger",
      "requiresNamespace": false,
      "signatures": [
        "(f: Function, min: Number, max: Number, numIntegrationPoints: Number) => Number"
      ],
      "isUnit": false,
      "description": "Integrates the function `f` between `min` and `max`, and computes `numIntegrationPoints` in between to do so.\n\nNote that the function `f` has to take in and return numbers. To integrate a function which returns distributions, use:\n\n~~~squiggle\nauxiliaryF(x) = mean(f(x))\n\nDanger.integrateFunctionBetweenWithNumIntegrationPoints(auxiliaryF, min, max, numIntegrationPoints)\n~~~\n",
      "examples": [
        {
          "text": "Danger.integrateFunctionBetweenWithNumIntegrationPoints({|x| x+1}, 1, 10, 10)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "integrateFunctionBetweenWithEpsilon",
      "namespace": "Danger",
      "requiresNamespace": false,
      "signatures": [
        "(f: Function, min: Number, max: Number, epsilon: Number) => Number"
      ],
      "isUnit": false,
      "description": "Integrates the function `f` between `min` and `max`, and uses an interval of `epsilon` between integration points when doing so. This makes its runtime less predictable than `integrateFunctionBetweenWithNumIntegrationPoints`, because runtime will not only depend on `epsilon`, but also on `min` and `max`.\n\nSame caveats as `integrateFunctionBetweenWithNumIntegrationPoints` apply.",
      "examples": [
        {
          "text": "Danger.integrateFunctionBetweenWithEpsilon({|x| x+1}, 1, 10, 0.1)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    },
    {
      "name": "optimalAllocationGivenDiminishingMarginalReturnsForManyFunctions",
      "namespace": "Danger",
      "requiresNamespace": false,
      "signatures": [
        "(fs: List(Function), funds: Number, approximateIncrement: Number) => any"
      ],
      "isUnit": false,
      "description": "Computes the optimal allocation of $`funds` between `f1` and `f2`. For the answer given to be correct, `f1` and `f2` will have to be decreasing, i.e., if `x > y`, then `f_i(x) < f_i(y)`.",
      "examples": [
        {
          "text": "Danger.optimalAllocationGivenDiminishingMarginalReturnsForManyFunctions(\n  [\n    {|x| x+1},\n    {|y| 10}\n  ],\n  100,\n  0.01\n)",
          "isInteractive": false,
          "useForTests": true
        }
      ]
    }
  ]
}