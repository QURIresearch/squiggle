import "hub:ozziegooen/sTest" as sTest
@hide
test = sTest.test
@hide
expect = sTest.expect
@hide
describe = sTest.describe

@hide
styleSquiggleCode(code) = "
```squiggle
" + code + "
```"

@doc(
  "
  round(num, n) -> string
  
  Rounds the number `num` to `n` decimal places." +
    styleSquiggleCode("round(3.14159, 2) -> \"3.14\"")
)
export round(num, n) = if typeOf(num) != "Number" then throw(
  "Was given a " + typeOf(num) + ", must be given a Number"
) else {
  asString = String.make(num)
  splitString = String.split(asString, "")
  if List.findIndex(splitString, {|r| r == "e"}) != -1 then {
    // Handle scientific notation
    parts = String.split(asString, "e")
    decimalPart = parts[0]
    exponentPart = parts[1]
    roundedDecimalPart = if List.findIndex(
      String.split(decimalPart, ""),
      {|r| r == "."}
    ) !=
      -1 then {
      decimalIndex = List.findIndex(
        String.split(decimalPart, ""),
        {|r| r == "."}
      )
      endIndex = min(
        [decimalIndex + n + 1, List.length(String.split(decimalPart, ""))]
      )
      String.split(decimalPart, "") -> List.slice(0, endIndex) -> List.join("")
    } else decimalPart
    roundedDecimalPart + "e" + exponentPart
  } else {
    // Handle non-scientific notation numbers
    decimalIndex = List.findIndex(splitString, {|r| r == "."})
    if decimalIndex == -1 then asString else {
      endIndex = min([decimalIndex + n + 1, List.length(splitString)])
      splitString -> List.slice(0, endIndex) -> List.join("")
    }
  }
}

@name("round tests")
roundTests = describe(
  "Round Function Tests",
  [
    test("rounds a simple number", {|| expect(round(3.14159, 2)).toBe("3.14")}),
    test("rounds a whole number", {|| expect(round(10, 2)).toBe("10")}),
    test(
      "rounds a number in scientific notation",
      {|| expect(round(1.23e4, 2)).toBe("12300")}
    ),
    test(
      "rounds a negative number",
      {|| expect(round(-2.7182, 2)).toBe("-2.71")}
    ),
    test(
      "throws when given distribution",
      {|| expect({|| round(1 to 10, 2)}).toThrowAnyError()}
    ),
  ]
)

@doc(
  "
  formatTime(hours) -> string
  
  Converts a number of hours to a formatted string indicating time in 
  seconds, minutes, hours, days, months, or years. Bolds the result." +
    styleSquiggleCode("formatTime(1) -> \"**1** hours\"")
)
export formatTime(hours) = {
  secondsInMinute = 60
  minutesInHour = 60
  hoursInDay = 24
  daysInMonth = 30
  monthsInYear = 12

  totalSeconds = hours * minutesInHour * secondsInMinute
  totalMinutes = hours * minutesInHour
  totalHours = hours
  totalDays = hours / hoursInDay
  totalMonths = totalDays / daysInMonth
  totalYears = totalMonths / monthsInYear
  round(n) = round(n, 2) -> {|r| "**" + r + "**"}

  if totalYears >= 1 then round(totalYears) + " years" else if totalMonths >=
    1 then round(totalMonths) + " months" else if totalDays >= 1 then round(
    totalDays
  ) +
    " days" else if totalHours >= 1 then round(totalHours) +
    " hours" else if totalMinutes >= 1 then round(totalMinutes) +
    " minutes" else round(totalSeconds) + " seconds"
}

@name("formatTime tests")
formatTimeTests = describe(
  "FormatTime Function Tests",
  [
    test(
      "formats time less than a minute",
      {|| expect(formatTime(0.01)).toBe("**36** seconds")}
    ),
    test(
      "formats time in hours",
      {|| expect(formatTime(1)).toBe("**1** hours")}
    ),
    test(
      "formats time in days",
      {|| expect(formatTime(24)).toBe("**1** days")}
    ),
    test(
      "formats time in months",
      {|| expect(formatTime(720)).toBe("**1** months")}
    ),
    test(
      "formats time in years",
      {|| expect(formatTime(8760)).toBe("**1.01** years")}
    ),
  ]
)

@doc(
  "## Linear or Quadratic Interpolation" +
    styleSquiggleCode(
      "@import('hub:ozziegooen/helpers' as h)

h.interpolate([{x: 0, y:10}, {x:10, y:20}], 'linear')(4) // 15
h.interpolate([{x: 0, y:10}, {x:10, y:20}], 'quadratic')(4) // 11.6

//makes a graph
foo(t:[0,30]) = h.interpolate([{x: 0, y:10}, {x:10, y:20}, {x:20, y:10}], 'quadratic')(t)"
    )
)
export interpolate(points, type) = {
  sortedPoints = List.sortBy(points, {|f| f.x}) //TODO: Sort, somehow
  {
    |x|
    result = List.reduce(
      sortedPoints,
      sortedPoints[0].y,
      {
        |acc, point, i|
        if i == 0 then acc else if sortedPoints[i - 1].x <= x &&
          x <= point.x then {
          leftPoint = sortedPoints[i - 1]
          rightPoint = point

          if type == "linear" then {
            slope = (rightPoint.y - leftPoint.y) / (rightPoint.x - leftPoint.x)
            leftPoint.y + slope * (x - leftPoint.x)
          } else if type == "quadratic" then {
            a = (rightPoint.y - leftPoint.y) / (rightPoint.x - leftPoint.x) ^ 2
            b = -2 * a * leftPoint.x
            c = leftPoint.y + a * leftPoint.x ^ 2
            a * x ^ 2 + b * x + c
          } else { foo: "Invalid interpolate type" }
        } else if x > sortedPoints[i - 1].x then sortedPoints[List.length(
          sortedPoints
        ) -
          1].y else acc
      }
    )
    result
  }
}

interpolationTests = describe(
  "Interpolation Function Tests",
  [
    test(
      "linear interpolation within range",
      {
        ||
        expect(
          interpolate([{ x: 0, y: 10 }, { x: 10, y: 20 }], "linear")(4)
        ).toBe(
          14
        )
      }
    ),
    test(
      "quadratic interpolation within range",
      {
        ||
        expect(
          interpolate([{ x: 0, y: 10 }, { x: 10, y: 20 }], "quadratic")(4)
        ).toBe(
          11.6
        )
      }
    ),
    test(
      "linear interpolation at boundary",
      {
        ||
        expect(
          interpolate([{ x: 0, y: 10 }, { x: 10, y: 20 }], "linear")(0)
        ).toBe(
          10
        )
      }
    ),
    test(
      "quadratic interpolation, additional points",
      {
        ||
        expect(
          interpolate(
            [{ x: 0, y: 10 }, { x: 10, y: 20 }, { x: 20, y: 10 }],
            "quadratic"
          )(
            15
          )
        ).toBe(
          17.5
        )
      }
    ),
  ]
)

//myShape = [{ x: 4, y: 10 }, { x: 20, y: 40 }, { x: 30, y: 20 }]
@hide
plot(fn, xPoints) = Plot.numericFn(
  fn,
  {
    xScale: Scale.linear({ min: 0, max: 50 }),
    xPoints: xPoints -> List.concat(List.upTo(0, 50)),
  }
)

@hide
calculator_fn(shape, select) = {
  xPoints = shape -> map({|r| r.x})
  if select == "linear" then plot(
    interpolate(shape, "linear"),
    xPoints
  ) else if select == "quadratic" then plot(
    interpolate(shape, "quadratic"),
    xPoints
  ) else {
    linear: plot(interpolate(shape, "linear"), xPoints),
    quadratic: plot(interpolate(shape, "quadratic"), xPoints),
  }
}

@name("Interpolation Calculator (for debugging)")
interpolationCalculator = Calculator(
  calculator_fn,
  {
    title: "Interpolate: function demonstration",
    description: "``interpolate(data, type='linear'|'quadratic')``.  
    
You have to enter data in the format of x and y values, as shown below, then get a function that can be called with any X to get any Y value.

*Note: One important restriction is that these don't yet do a good job outside the data bounds. It's unclear what's best. I assume we should later give users options.*",
    inputs: [
      Input.textArea(
        {
          name: "Example input",
          default: "[
  { x: 4, y: 10 },
  { x: 20, y: 30 },
  { x: 30, y: 50 },
  { x: 40, y: 30 },,
]",
        }
      ),
      Input.select(
        {
          name: "interpolate Type",
          options: ["linear", "quadratic", "show both (for demonstration)"],
          default: "show both (for demonstration)",
        }
      ),
    ],
  }
)

@doc(
  "
  distributionListRange(dists, lowQuantile, highQuantile)
  
  Returns a range that is the minimum and maximum of the low and high quantiles of the distributions in the list." +
    styleSquiggleCode(
      "distributionListRange([dist1, dist2, dist3], 0.05, 0.95) -> {min: 1, max: 10}"
    )
)
export distributionListRange(dists, lowQuantile, highQuantile) = {
  min: Number.min(List.map(dists, {|d| Dist.quantile(d, lowQuantile)})),
  max: Number.max(List.map(dists, {|d| Dist.quantile(d, highQuantile)})),
}

@startOpen
@notebook
readme = [
  "# Helpers Library

A small library of various helper functions for numerical operations and formatting. Import this library into your Squiggle projects to utilize these utilities.

## Import Usage

To use the functions from this library in your projects, import it as follows:

```squiggle
@import('hub:ozziegooen/helpers') as h
```
## Functions Overview

### round",
  Tag.getDoc(round),
  "---",
  "### formatTime",
  Tag.getDoc(formatTime),
  "---",
  "### interpolate
Provides linear or quadratic interpolation for a set of points. Returns a function that can interpolate the y-value for any x-value.

Example for Linear Interpolation:

```squiggle
h.interpolate([{x: 0, y: 10}, {x: 10, y: 20}], 'linear')(4) // Returns: 15
```

Example for Quadratic Interpolation:

```squiggle
h.interpolate([{x: 0, y: 10}, {x: 10, y: 20}], 'quadratic')(4) // Returns: 11.6
```

### Interpolation Calculator
This tool helps visualize and compare the results of linear and quadratic interpolations for a given set of data points. Below is an example use case integrated with the library.",
  interpolationCalculator,
  "---",
  "### distributionListRange",
  Tag.getDoc(distributionListRange),
]
