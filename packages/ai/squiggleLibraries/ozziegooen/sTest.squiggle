@startOpen
@name("Documentation")
documentation = "
# SquiggleJest Testing Library

SquiggleJest is a simple testing library for Squiggle, inspired by Jest for JavaScript. It provides a way to write and run tests for your Squiggle models and functions.

## How to Use

1. Import the library (assuming it's in a file named 'squiggleJest.squiggle'):
   ```squiggle
   import 'squiggleJest.squiggle' as SJ
   ```

2. Create your tests using the `test` function:
   ```squiggle
   test = SJ.test
   expect = SJ.expect

   myTest = test(\"My test description\", {|| 
     expect(2 + 2).toBe(4)
   })
   ```

3. Group related tests using the `describe` function:
   ```squiggle
   describe = SJ.describe

   myTestSuite = describe(\"My Test Suite\", [
     test(\"First test\", {|| expect(true).toBeTrue()}),
     test(\"Second test\", {|| expect(5).toBeGreaterThan(3)})
   ])
   ```

4. Run your test suite and view the results.

## Available Matchers

- `toBe(expected)`: Checks for exact equality
- `toBeGreaterThan(expected)`: Checks if the actual value is greater than the expected
- `toBeGreaterThanOrEqual(expected)`: Checks if the actual value is greater or equal than the expected
- `toBeLessThan(expected)`: Checks if the actual value is less than the expected
- `toBeLessThanOrEqual(expected)`: Checks if the actual value is less than or equal than the expected
- `toBeTrue()`: Checks if the value is true
- `toBeFalse()`: Checks if the value is false
- `toBeCloseTo(expected, epsilon)`: Checks if the actual value is close to the expected value within a given epsilon.
- `toBeBetween(low, high)`: Checks if the actual value is between the given low and high values (inclusive).

## Examples

### Testing a Simple Function

```squiggle
add(a, b) = a + b

describe(\"Add function\", [
  test(\"adds two positive numbers\", {|| 
    expect(add(2, 3)).toBe(5)
  }),
  test(\"adds a positive and a negative number\", {|| 
    expect(add(5, -3)).toBe(2)
  })
])
```

### Testing a Distribution

```squiggle
myDist = normal(10, 2)

describe(\"My Distribution\", [
  test(\"has correct mean\", {|| 
    expect(mean(myDist)).toBe(10)
  }),
  test(\"has correct standard deviation\", {|| 
    expect(stdev(myDist)).toBe(2)
  }),
  test(\"90% of values are within 2 standard deviations\", {||
    lower = 10 - 2 * 2
    upper = 10 + 2 * 2
    expect(cdf(myDist, upper) - cdf(myDist, lower)).toBeGreaterThan(0.9)
  })
])
```

These examples demonstrate how to use SquiggleJest to test various aspects of your Squiggle models, from simple functions to complex models with distributions.
"

@startClosed
createExpectation(actual) = {
  toBe: {
    |expected|
    if actual != expected then "Expected " + expected + " but got " +
      actual else true
  },
  toBeGreaterThan: {
    |expected|
    if actual > expected then true else "Expected " + actual +
      " to be greater than " +
      expected
  },
  toBeGreaterThanOrEqual: {
    |expected|
    if actual >= expected then true else "Expected " + actual +
      " to be less than or equal" +
      expected
  },
  toBeLessThan: {
    |expected|
    if actual < expected then true else "Expected " + actual +
      " to be less than " +
      expected
  },
  toBeLessThanOrEqual: {
    |expected|
    if actual <= expected then true else "Expected " + actual +
      " to be less than or equal" +
      expected
  },
  toBeBetween: {
    |low, high|
    if actual < low || actual > high then "Expected " + actual +
      " to be between " +
      low +
      " and " +
      high else true
  },
  toBeCloseTo: {
    |expected, epsilon|
    if abs(actual - expected) > epsilon then "Expected " + actual +
      " to be close to " +
      expected +
      " (within " +
      epsilon +
      ")" else true
  },
  toBeTrue: {|| if !actual then "Expected true but got " + actual else true},
  toBeFalse: {|| if actual then "Expected false but got " + actual else true},
}

runTest(test) = {
  fnResult = test.fn()
  {
    name: test.name,
    passed: fnResult == true,
    error: if fnResult != true then fnResult else "",
  }
}

@startClosed
generateTestReport(name, testResults) = {
  passedTests = List.filter(testResults, {|t| t.passed})
  failedTests = List.filter(testResults, {|t| !t.passed})

  [
    "## Test Suite: " + name + "  ",
    "**Total tests**: " + List.length(testResults) + "  ",
    "**Passed**: " + List.length(passedTests) + "  ",
    "**Failed**: " + List.length(failedTests),
    "",
    "**Results:**  ",
  ]
}

@startClosed
formatTestResult(testResult) = (if testResult.passed then "✅" else "❌") +
  "  " +
  testResult.name +
  (if testResult.error != "" then "
    --- Error: *" + testResult.error +
    "*" else "") +
  "  "

// Main squiggleJest framework
@startClosed
squiggleJest = {
  expect: createExpectation,
  test: {|name, fn| { name: name, fn: fn }},
  describe: {
    |name, tests|
    testResults = List.map(tests, runTest)
    report = generateTestReport(name, testResults)
    testDetails = List.map(testResults, formatTestResult)
    List.concat(report, testDetails) -> List.join("
")
  },
}

export test = squiggleJest.test
export describe = squiggleJest.describe
export expect = squiggleJest.expect

/// Testing ---
@name("Example Model")
model = { items: [1, 2, 3] }

testResults = describe(
  "Model Tests",
  [
    test(
      "has items with length 3",
      {|| expect(List.length(model.items)).toBe(3)}
    ),
    test("first item is 1", {|| expect(model.items[0]).toBe(1)}),
    test(
      "last item is greater than 2",
      {|| expect(model.items[2]).toBeGreaterThan(1)}
    ),
    test(
      "second item is less than 3",
      {|| expect(model.items[1]).toBeLessThan(8)}
    ),
    test(
      "second item is between 1 and 5",
      {|| expect(model.items[1]).toBeBetween(1, 3)}
    ),
    test(
      "contains truthy value",
      {|| expect(List.some(model.items, {|i| i > 0})).toBeTrue()}
    ),
    test(
      "doesn't contain 4",
      {|| expect(List.some(model.items, {|i| i == 4})).toBeFalse()}
    ),
    test("this test should fail", {|| expect(1).toBe(2)}),
  ]
)

comparisonTests = describe(
  "Number Comparisons",
  [
    test("5 is greater than 3", {|| expect(5).toBeGreaterThan(3)}),
    test(
      "5 is greater than or equal to 5",
      {|| expect(5).toBeGreaterThanOrEqual(5)}
    ),
    test("3 is less than 5", {|| expect(3).toBeLessThan(5)}),
    test("5 is less than or equal to 5", {|| expect(5).toBeLessThanOrEqual(5)}),
    test("7 is between 5 and 10", {|| expect(7).toBeBetween(5, 10)}),
    test(
      "5 is close to 5.0001 within 0.001",
      {|| expect(5).toBeCloseTo(5.0001, 0.001)}
    ),
    test("0 is not greater than 0", {|| expect(0).toBeLessThanOrEqual(0)}),
    test("-1 is less than 0", {|| expect(-1).toBeLessThan(0)}),
    test(
      "1000000 is greater than 999999",
      {|| expect(1000000).toBeGreaterThan(999999)}
    ),
    test(
      "0.1 + 0.2 is close to 0.3",
      {|| expect(0.1 + 0.2).toBeCloseTo(0.3, 0.0000001)}
    ),
    test(
      "PI is approximately 3.14159",
      {|| expect(3.14159).toBeCloseTo(Math.pi, 0.00001)}
    ),
    test(
      "e is approximately 2.71828",
      {|| expect(2.71828).toBeCloseTo(Math.e, 0.00001)}
    ),
    test(
      "10 is between 9.99999 and 10.00001",
      {|| expect(10).toBeBetween(9.99999, 10.00001)}
    ),
    test(
      "5 is not between 5.00001 and 10",
      {|| expect(5).toBeLessThan(5.00001)}
    ),
    test("1e-10 is greater than 0", {|| expect(1e-10).toBeGreaterThan(0)}),
    test(
      "The absolute difference between 1/3 and 0.333333 is less than 1e-5",
      {|| expect(abs(1 / 3 - 0.333333)).toBeLessThan(1e-5)}
    ),
    test(
      "2^53 - 1 is the largest integer precisely representable in IEEE 754",
      {|| expect(2 ^ 53 - 1).toBe(9007199254740991)}
    ),
  ]
)
