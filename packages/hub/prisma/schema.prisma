// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SquiggleCache {
  id       String  @id
  ok       Boolean
  error    String?
  result   Json?
  bindings Json?
}

// Auth.js models; https://authjs.dev/reference/adapter/prisma#create-the-prisma-schema-from-scratch
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Model         Model[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// models are polymorphic;
// polymorphism schema inspired by https://stackoverflow.com/a/73140073
enum ModelType {
  SquiggleSnippet
}

model Model {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner  User   @relation(fields: [userId], references: [id])
  userId String

  squiggleSnippet SquiggleSnippet? @relation("SquiggleSnippetModel", fields: [modelId], references: [id], map: "squiggleSnippet_modelId")
  modelId         String
  modelType       ModelType
}

model SquiggleSnippet {
  id    String  @id @default(cuid())
  Model Model[] @relation("SquiggleSnippetModel")

  code String
}
