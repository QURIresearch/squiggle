// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SquiggleCache {
  id       String  @id
  ok       Boolean
  error    String?
  result   Json?
  bindings Json?
}

// Auth.js models; https://authjs.dev/reference/adapter/prisma#create-the-prisma-schema-from-scratch
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  username      String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  models        Model[]
  definitions   Definition[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Models are polymorphic.
// Polymorphism schema inspired by https://stackoverflow.com/a/73140073
enum ModelType {
  SquiggleSnippet
}

model Model {
  id String @id @default(cuid())

  slug String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  revisions ModelRevision[]

  @@unique([slug, ownerId])
  @@index([createdAt])
}

model ModelRevision {
  id String @id @default(cuid())

  createdAt DateTime @default(now())

  description String @default("")

  model   Model  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId String

  contentType ModelType

  squiggleSnippet SquiggleSnippet? @relation(fields: [contentId], references: [id], map: "squiggleSnippet_contentId")
  contentId       String?          @unique

  variablesWithDefinitions VariableWithDefinition[]
}

model SquiggleSnippet {
  id String @id @default(cuid())

  code String

  revision ModelRevision?
}

// Definitions are polymorphic too.
enum DefinitionType {
  RelativeValues
}

model Definition {
  id String @id @default(cuid())

  slug String

  createdAt DateTime @default(now())

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String

  revisions DefinitionRevision[]

  modelVariables VariableWithDefinition[]

  @@unique([slug, ownerId])
  @@index([createdAt])
}

model DefinitionRevision {
  id String @id @default(cuid())

  createdAt DateTime @default(now())

  definition   Definition @relation(fields: [definitionId], references: [id], onDelete: Cascade)
  definitionId String

  contentType DefinitionType

  relativeValues RelativeValuesDefinition? @relation(fields: [contentId], references: [id], map: "relativeValues_contentId")
  contentId      String?                   @unique
}

model RelativeValuesDefinition {
  id String @id @default(cuid())

  title String

  revision DefinitionRevision?

  items    Json
  clusters Json
}

// Note that model _revisions_ are associated with definitions (and not definition revisions).
// Associating model revisions with definition revisions would be better, but it's more complicated.
model VariableWithDefinition {
  modelRevision   ModelRevision @relation(fields: [modelRevisionId], references: [id])
  modelRevisionId String
  definition      Definition    @relation(fields: [definitionId], references: [id])
  definitionId    String

  variable String

  @@id([modelRevisionId, definitionId])
}
