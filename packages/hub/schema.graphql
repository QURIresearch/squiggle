type AcceptReusableGroupInviteTokenResult {
  membership: UserGroupMembership!
}

type AddUserToGroupResult {
  membership: UserGroupMembership!
}

type AdminRebuildSearchIndexResult {
  ok: Boolean!
}

type AdminUpdateModelVersionResult {
  model: Model!
}

type BaseError implements Error {
  message: String!
}

type BuildRelativeValuesCacheResult {
  relativeValuesExport: RelativeValuesExport!
}

type CancelGroupInviteResult {
  invite: GroupInvite!
}

type ClearRelativeValuesCacheResult {
  relativeValuesExport: RelativeValuesExport!
}

type CreateGroupResult {
  group: Group!
}

type CreateRelativeValuesDefinitionResult {
  definition: RelativeValuesDefinition!
}

type CreateReusableGroupInviteTokenResult {
  group: Group!
}

type CreateSquiggleSnippetModelResult {
  model: Model!
}

input DefinitionRefInput {
  owner: String!
  slug: String!
}

type DeleteMembershipResult {
  ok: Boolean!
}

type DeleteModelResult {
  ok: Boolean!
}

type DeleteRelativeValuesDefinitionResult {
  ok: Boolean!
}

type DeleteReusableGroupInviteTokenResult {
  group: Group!
}

type EmailGroupInvite implements GroupInvite & Node {
  email: String!
  group: Group!
  id: ID!
  role: MembershipRole!
}

interface Error {
  message: String!
}

type GlobalStatistics {
  models: Int!
  relativeValuesDefinitions: Int!
  users: Int!
}

type Group implements Node & Owner {
  createdAtTimestamp: Float!
  id: ID!
  inviteForMe: GroupInvite
  invites(after: String, before: String, first: Int, last: Int): GroupInviteConnection
  memberships(after: String, before: String, first: Int, last: Int): UserGroupMembershipConnection!
  modelExports(after: String, before: String, first: Int, last: Int): ModelExport!
  models(after: String, before: String, first: Int, last: Int): ModelConnection!
  myMembership: UserGroupMembership
  reusableInviteToken: String
  slug: String!
  updatedAtTimestamp: Float!
}

type GroupConnection {
  edges: [GroupEdge!]!
  pageInfo: PageInfo!
}

type GroupEdge {
  cursor: String!
  node: Group!
}

interface GroupInvite {
  group: Group!
  id: ID!
  role: MembershipRole!
}

type GroupInviteConnection {
  edges: [GroupInviteEdge!]!
  pageInfo: PageInfo!
}

type GroupInviteEdge {
  cursor: String!
  node: GroupInvite!
}

enum GroupInviteReaction {
  Accept
  Decline
}

input GroupsQueryInput {
  """List only groups that you're a member of"""
  myOnly: Boolean
  slugContains: String
}

type InviteUserToGroupResult {
  invite: GroupInvite!
}

type Me {
  asUser: User!
  email: String!
  username: String
}

enum MembershipRole {
  Admin
  Member
}

type Model implements Node {
  createdAtTimestamp: Float!
  currentRevision: ModelRevision!
  exportRevisions(after: String, before: String, first: Int, last: Int, variableId: String!): ModelExportRevisionsConnection!
  id: ID!
  isEditable: Boolean!
  isPrivate: Boolean!
  lastRevisionWithBuild: ModelRevision
  owner: Owner!
  revision(id: ID!): ModelRevision!
  revisions(after: String, before: String, first: Int, last: Int): ModelRevisionConnection!
  slug: String!
  updatedAtTimestamp: Float!
}

type ModelConnection {
  edges: [ModelEdge!]!
  pageInfo: PageInfo!
}

union ModelContent = SquiggleSnippet

type ModelEdge {
  cursor: String!
  node: Model!
}

type ModelExport implements Node {
  docstring: String!
  id: ID!
  isCurrent: Boolean!
  modelRevision: ModelRevision!
  owner: Owner!
  title: String
  variableName: String!
  variableType: String!
}

type ModelExportConnection {
  edges: [ModelExportEdge!]!
  pageInfo: PageInfo!
}

type ModelExportEdge {
  cursor: String!
  node: ModelExport!
}

input ModelExportQueryInput {
  modelId: String
  owner: String
  variableName: String
}

type ModelExportRevisionsConnection {
  edges: [ModelExportRevisionsConnectionEdge!]!
  pageInfo: PageInfo!
}

type ModelExportRevisionsConnectionEdge {
  cursor: String!
  node: ModelExport!
}

type ModelRevision implements Node {
  author: User
  buildStatus: ModelRevisionBuildStatus!
  comment: String!
  content: ModelContent!
  createdAtTimestamp: Float!
  exportNames: [String!]!
  exports: [ModelExport!]!
  forRelativeValues(input: ModelRevisionForRelativeValuesInput!): ModelRevisionForRelativeValuesResult!
  id: ID!
  lastBuild: ModelRevisionBuild
  model: Model!
  relativeValuesExports: [RelativeValuesExport!]!
}

type ModelRevisionBuild implements Node {
  createdAtTimestamp: Float!
  errors: [String!]!
  id: ID!
  modelRevision: ModelRevision!
  runSeconds: Float!
}

enum ModelRevisionBuildStatus {
  Failure
  Pending
  Skipped
  Success
}

type ModelRevisionConnection {
  edges: [ModelRevisionEdge!]!
  pageInfo: PageInfo!
}

type ModelRevisionEdge {
  cursor: String!
  node: ModelRevision!
}

input ModelRevisionForRelativeValuesInput {
  for: ModelRevisionForRelativeValuesSlugOwnerInput
  variableName: String!
}

union ModelRevisionForRelativeValuesResult = BaseError | NotFoundError | RelativeValuesExport

input ModelRevisionForRelativeValuesSlugOwnerInput {
  owner: String!
  slug: String!
}

type ModelsByVersion {
  count: Int!
  models: [Model!]!
  privateCount: Int!
  version: String!
}

type MoveModelResult {
  model: Model!
}

type Mutation {
  acceptReusableGroupInviteToken(input: MutationAcceptReusableGroupInviteTokenInput!): MutationAcceptReusableGroupInviteTokenResult!
  addUserToGroup(input: MutationAddUserToGroupInput!): MutationAddUserToGroupResult!

  """Admin-only query for rebuilding the search index"""
  adminRebuildSearchIndex: MutationAdminRebuildSearchIndexResult!

  """Admin-only query for upgrading model versions"""
  adminUpdateModelVersion(input: MutationAdminUpdateModelVersionInput!): MutationAdminUpdateModelVersionResult!
  buildRelativeValuesCache(input: MutationBuildRelativeValuesCacheInput!): MutationBuildRelativeValuesCacheResult!
  cancelGroupInvite(input: MutationCancelGroupInviteInput!): MutationCancelGroupInviteResult!
  clearRelativeValuesCache(input: MutationClearRelativeValuesCacheInput!): MutationClearRelativeValuesCacheResult!
  createGroup(input: MutationCreateGroupInput!): MutationCreateGroupResult!
  createRelativeValuesDefinition(input: MutationCreateRelativeValuesDefinitionInput!): MutationCreateRelativeValuesDefinitionResult!

  """
  Create or replace a reusable invite token for a group, available as `reusableInviteToken` field on group object.
  
  You must be an admin of the group to call this mutation. Previous invite token, if it existed, will stop working.
  """
  createReusableGroupInviteToken(input: MutationCreateReusableGroupInviteTokenInput!): MutationCreateReusableGroupInviteTokenResult!
  createSquiggleSnippetModel(input: MutationCreateSquiggleSnippetModelInput!): MutationCreateSquiggleSnippetModelResult!
  deleteMembership(input: MutationDeleteMembershipInput!): MutationDeleteMembershipResult!
  deleteModel(input: MutationDeleteModelInput!): MutationDeleteModelResult!
  deleteRelativeValuesDefinition(input: MutationDeleteRelativeValuesDefinitionInput!): MutationDeleteRelativeValuesDefinitionResult!

  """Disable a reusable invite token for a group."""
  deleteReusableGroupInviteToken(input: MutationDeleteReusableGroupInviteTokenInput!): MutationDeleteReusableGroupInviteTokenResult!
  inviteUserToGroup(input: MutationInviteUserToGroupInput!): MutationInviteUserToGroupResult!
  moveModel(input: MutationMoveModelInput!): MutationMoveModelResult!
  reactToGroupInvite(input: MutationReactToGroupInviteInput!): MutationReactToGroupInviteResult!
  setUsername(username: String!): MutationSetUsernameResult!
  updateGroupInviteRole(input: MutationUpdateGroupInviteRoleInput!): MutationUpdateGroupInviteRoleResult!
  updateMembershipRole(input: MutationUpdateMembershipRoleInput!): MutationUpdateMembershipRoleResult!
  updateModelPrivacy(input: MutationUpdateModelPrivacyInput!): MutationUpdateModelPrivacyResult!
  updateModelSlug(input: MutationUpdateModelSlugInput!): MutationUpdateModelSlugResult!
  updateRelativeValuesDefinition(input: MutationUpdateRelativeValuesDefinitionInput!): MutationUpdateRelativeValuesDefinitionResult!
  updateSquiggleSnippetModel(input: MutationUpdateSquiggleSnippetModelInput!): MutationUpdateSquiggleSnippetModelResult!
  validateReusableGroupInviteToken(input: MutationValidateReusableGroupInviteTokenInput!): MutationValidateReusableGroupInviteTokenResult!
}

input MutationAcceptReusableGroupInviteTokenInput {
  groupSlug: String!
  inviteToken: String!
}

union MutationAcceptReusableGroupInviteTokenResult = AcceptReusableGroupInviteTokenResult | BaseError

input MutationAddUserToGroupInput {
  group: String!
  role: MembershipRole!
  username: String!
}

union MutationAddUserToGroupResult = AddUserToGroupResult | BaseError | ValidationError

union MutationAdminRebuildSearchIndexResult = AdminRebuildSearchIndexResult | BaseError

input MutationAdminUpdateModelVersionInput {
  modelId: String!
  version: String!
}

union MutationAdminUpdateModelVersionResult = AdminUpdateModelVersionResult | BaseError

input MutationBuildRelativeValuesCacheInput {
  exportId: String!
}

union MutationBuildRelativeValuesCacheResult = BaseError | BuildRelativeValuesCacheResult

input MutationCancelGroupInviteInput {
  inviteId: String!
}

union MutationCancelGroupInviteResult = BaseError | CancelGroupInviteResult

input MutationClearRelativeValuesCacheInput {
  exportId: String!
}

union MutationClearRelativeValuesCacheResult = BaseError | ClearRelativeValuesCacheResult

input MutationCreateGroupInput {
  slug: String!
}

union MutationCreateGroupResult = BaseError | CreateGroupResult

input MutationCreateRelativeValuesDefinitionInput {
  clusters: [RelativeValuesClusterInput!]!

  """
  Optional, if not set, definition will be created on current user's account
  """
  groupSlug: String
  items: [RelativeValuesItemInput!]!
  recommendedUnit: String
  slug: String!
  title: String!
}

union MutationCreateRelativeValuesDefinitionResult = BaseError | CreateRelativeValuesDefinitionResult | ValidationError

input MutationCreateReusableGroupInviteTokenInput {
  slug: String!
}

union MutationCreateReusableGroupInviteTokenResult = BaseError | CreateReusableGroupInviteTokenResult

input MutationCreateSquiggleSnippetModelInput {
  """Squiggle source code"""
  code: String!

  """Optional, if not set, model will be created on current user's account"""
  groupSlug: String

  """Defaults to false"""
  isPrivate: Boolean

  """A unique seed, used for calculation"""
  seed: String!
  slug: String!
  version: String!
}

union MutationCreateSquiggleSnippetModelResult = BaseError | CreateSquiggleSnippetModelResult | ValidationError

input MutationDeleteMembershipInput {
  group: String!
  user: String!
}

union MutationDeleteMembershipResult = BaseError | DeleteMembershipResult

input MutationDeleteModelInput {
  owner: String!
  slug: String!
}

union MutationDeleteModelResult = BaseError | DeleteModelResult | NotFoundError | ValidationError

input MutationDeleteRelativeValuesDefinitionInput {
  owner: String!
  slug: String!
}

union MutationDeleteRelativeValuesDefinitionResult = BaseError | DeleteRelativeValuesDefinitionResult

input MutationDeleteReusableGroupInviteTokenInput {
  slug: String!
}

union MutationDeleteReusableGroupInviteTokenResult = BaseError | DeleteReusableGroupInviteTokenResult

input MutationInviteUserToGroupInput {
  group: String!
  role: MembershipRole!
  username: String!
}

union MutationInviteUserToGroupResult = BaseError | InviteUserToGroupResult | ValidationError

input MutationMoveModelInput {
  newOwner: String!
  oldOwner: String!
  slug: String!
}

union MutationMoveModelResult = BaseError | MoveModelResult | NotFoundError | ValidationError

input MutationReactToGroupInviteInput {
  action: GroupInviteReaction!
  inviteId: String!
}

union MutationReactToGroupInviteResult = BaseError | ReactToGroupInviteResult

union MutationSetUsernameResult = BaseError | Me | ValidationError

input MutationUpdateGroupInviteRoleInput {
  inviteId: String!
  role: MembershipRole!
}

union MutationUpdateGroupInviteRoleResult = BaseError | UpdateGroupInviteRoleResult

input MutationUpdateMembershipRoleInput {
  group: String!
  role: MembershipRole!
  user: String!
}

union MutationUpdateMembershipRoleResult = BaseError | UpdateMembershipRoleResult

input MutationUpdateModelPrivacyInput {
  isPrivate: Boolean!
  owner: String!
  slug: String!
}

union MutationUpdateModelPrivacyResult = BaseError | UpdateModelPrivacyResult

input MutationUpdateModelSlugInput {
  newSlug: String!
  oldSlug: String!
  owner: String!
}

union MutationUpdateModelSlugResult = BaseError | UpdateModelSlugResult

input MutationUpdateRelativeValuesDefinitionInput {
  clusters: [RelativeValuesClusterInput!]!
  items: [RelativeValuesItemInput!]!
  owner: String!
  recommendedUnit: String
  slug: String!
  title: String!
}

union MutationUpdateRelativeValuesDefinitionResult = BaseError | UpdateRelativeValuesDefinitionResult

input MutationUpdateSquiggleSnippetModelInput {
  comment: String
  content: SquiggleSnippetContentInput!
  owner: String!
  relativeValuesExports: [RelativeValuesExportInput!]
  slug: String!
}

union MutationUpdateSquiggleSnippetModelResult = BaseError | UpdateSquiggleSnippetResult

input MutationValidateReusableGroupInviteTokenInput {
  groupSlug: String!
  inviteToken: String!
}

union MutationValidateReusableGroupInviteTokenResult = BaseError | ValidateReusableGroupInviteTokenResult

interface Node {
  id: ID!
}

type NotFoundError implements Error {
  message: String!
}

interface Owner {
  id: ID!
  slug: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  globalStatistics: GlobalStatistics!
  group(slug: String!): QueryGroupResult!
  groups(after: String, before: String, first: Int, input: GroupsQueryInput, last: Int): GroupConnection!
  me: Me!
  model(input: QueryModelInput!): QueryModelResult!
  modelExports(after: String, before: String, first: Int, input: ModelExportQueryInput, last: Int): ModelExportConnection!
  models(after: String, before: String, first: Int, last: Int): ModelConnection!

  """Admin-only query for listing models in /admin UI"""
  modelsByVersion: [ModelsByVersion!]!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  relativeValuesDefinition(input: QueryRelativeValuesDefinitionInput!): QueryRelativeValuesDefinitionResult!
  relativeValuesDefinitions(after: String, before: String, first: Int, input: RelativeValuesDefinitionsQueryInput, last: Int): RelativeValuesDefinitionConnection!
  runSquiggle(code: String!, seed: String): SquiggleOutput!
  search(after: String, before: String, first: Int, last: Int, text: String!): QuerySearchResult!
  userByUsername(username: String!): QueryUserByUsernameResult!
  users(after: String, before: String, first: Int, input: UsersQueryInput, last: Int): QueryUsersConnection!
}

union QueryGroupResult = BaseError | Group | NotFoundError

input QueryModelInput {
  owner: String!
  slug: String!
}

union QueryModelResult = BaseError | Model | NotFoundError

input QueryRelativeValuesDefinitionInput {
  owner: String!
  slug: String!
}

union QueryRelativeValuesDefinitionResult = BaseError | NotFoundError | RelativeValuesDefinition

type QuerySearchConnection {
  edges: [SearchEdge!]!
  pageInfo: PageInfo!
}

union QuerySearchResult = BaseError | QuerySearchConnection

union QueryUserByUsernameResult = BaseError | NotFoundError | User

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User!
}

type ReactToGroupInviteResult {
  invite: GroupInvite!
  membership: UserGroupMembership
}

type RelativeValuesCluster {
  color: String!
  id: String!
  recommendedUnit: String
}

input RelativeValuesClusterInput {
  color: String!
  id: String!
  recommendedUnit: String
}

type RelativeValuesDefinition implements Node {
  createdAtTimestamp: Float!
  currentRevision: RelativeValuesDefinitionRevision!
  id: ID!
  isEditable: Boolean!
  modelExports: [RelativeValuesExport!]!
  owner: Owner!
  slug: String!
  updatedAtTimestamp: Float!
}

type RelativeValuesDefinitionConnection {
  edges: [RelativeValuesDefinitionEdge!]!
  pageInfo: PageInfo!
}

type RelativeValuesDefinitionEdge {
  cursor: String!
  node: RelativeValuesDefinition!
}

type RelativeValuesDefinitionRevision implements Node {
  clusters: [RelativeValuesCluster!]!
  id: ID!
  items: [RelativeValuesItem!]!
  recommendedUnit: String
  title: String!
}

input RelativeValuesDefinitionsQueryInput {
  owner: String
  slugContains: String
}

type RelativeValuesExport implements Node {
  cache: [RelativeValuesPairCache!]!
  definition: RelativeValuesDefinition!
  id: ID!
  modelRevision: ModelRevision!
  variableName: String!
}

input RelativeValuesExportInput {
  definition: DefinitionRefInput!
  variableName: String!
}

type RelativeValuesItem {
  clusterId: String
  description: String!
  id: String!
  name: String!
}

input RelativeValuesItemInput {
  clusterId: String
  description: String
  id: String!
  name: String!
}

type RelativeValuesPairCache implements Node {
  errorString: String
  firstItem: String!
  id: ID!
  resultJSON: String!
  secondItem: String!
}

type SearchEdge {
  cursor: String!
  node: Searchable!
  rank: Float!
  slugSnippet: String!
  textSnippet: String!
}

type Searchable implements Node {
  id: ID!
  link: String!
  object: SearchableObject!
}

union SearchableObject = Group | Model | RelativeValuesDefinition | User

type SquiggleErrorOutput implements SquiggleOutput {
  errorString: String!
  isCached: Boolean!
}

type SquiggleOkOutput implements SquiggleOutput {
  bindingsJSON: String!
  isCached: Boolean!
  resultJSON: String!
}

interface SquiggleOutput {
  isCached: Boolean!
}

type SquiggleSnippet implements Node {
  autorunMode: Boolean
  code: String!
  id: ID!
  sampleCount: Int
  seed: String!
  version: String!
  xyPointLength: Int
}

input SquiggleSnippetContentInput {
  autorunMode: Boolean
  code: String!
  sampleCount: Int
  seed: String!
  version: String!
  xyPointLength: Int
}

type UpdateGroupInviteRoleResult {
  invite: GroupInvite!
}

type UpdateMembershipRoleResult {
  membership: UserGroupMembership!
}

type UpdateModelPrivacyResult {
  model: Model!
}

type UpdateModelSlugResult {
  model: Model!
}

type UpdateRelativeValuesDefinitionResult {
  definition: RelativeValuesDefinition!
}

type UpdateSquiggleSnippetResult {
  model: Model!
}

type User implements Node & Owner {
  groups(after: String, before: String, first: Int, last: Int): GroupConnection!
  id: ID!
  isRoot: Boolean!
  modelExports(after: String, before: String, first: Int, last: Int): ModelExportConnection!
  models(after: String, before: String, first: Int, last: Int): ModelConnection!
  relativeValuesDefinitions(after: String, before: String, first: Int, last: Int): RelativeValuesDefinitionConnection!
  slug: String!
  username: String!
}

type UserGroupInvite implements GroupInvite & Node {
  group: Group!
  id: ID!
  role: MembershipRole!
  user: User!
}

type UserGroupMembership implements Node {
  group: Group!
  id: ID!
  role: MembershipRole!
  user: User!
}

type UserGroupMembershipConnection {
  edges: [UserGroupMembershipEdge!]!
  pageInfo: PageInfo!
}

type UserGroupMembershipEdge {
  cursor: String!
  node: UserGroupMembership!
}

input UsersQueryInput {
  usernameContains: String
}

type ValidateReusableGroupInviteTokenResult {
  ok: Boolean!
}

type ValidationError implements Error {
  issues: [ValidationErrorIssue!]!
  message: String!
}

type ValidationErrorIssue {
  message: String!
  path: [String!]!
}