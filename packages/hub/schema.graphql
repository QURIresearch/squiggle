type BaseError implements Error {
  message: String!
}

type CreateRelativeValuesDefinitionResult {
  definition: RelativeValuesDefinition!
}

type CreateSquiggleSnippetResult {
  model: Model!
}

input DefinitionRefInput {
  slug: String!
  username: String!
}

type DeleteModelResult {
  ok: Boolean!
}

type DeleteRelativeValuesDefinitionResult {
  ok: Boolean!
}

interface Error {
  message: String!
}

type Me {
  email: String
  username: String
}

type Model implements Node {
  createdAtTimestamp: Float!
  currentRevision: ModelRevision!
  id: ID!
  owner: User!
  revision(id: ID!): ModelRevision!
  revisions(after: String, before: String, first: Int, last: Int): ModelRevisionConnection!
  slug: String!
  updatedAtTimestamp: Float!
}

type ModelConnection {
  edges: [ModelEdge!]!
  pageInfo: PageInfo!
}

union ModelContent = SquiggleSnippet

type ModelEdge {
  cursor: String!
  node: Model!
}

type ModelRevision implements Node {
  content: ModelContent!
  createdAtTimestamp: Float!
  dbId: ID!
  description: String!
  forRelativeValues(input: ModelRevisionForRelativeValuesInput): RelativeValuesExport
  id: ID!
  relativeValuesExports: [RelativeValuesExport!]!
}

type ModelRevisionConnection {
  edges: [ModelRevisionEdge!]!
  pageInfo: PageInfo!
}

type ModelRevisionEdge {
  cursor: String!
  node: ModelRevision!
}

input ModelRevisionForRelativeValuesInput {
  slug: String!
  username: String!
}

type Mutation {
  createRelativeValuesDefinition(input: MutationCreateRelativeValuesDefinitionInput!): MutationCreateRelativeValuesDefinitionResult!
  createSquiggleSnippetModel(input: MutationCreateSquiggleSnippetModelInput!): MutationCreateSquiggleSnippetModelResult!
  deleteModel(input: MutationDeleteModelInput!): MutationDeleteModelResult!
  deleteRelativeValuesDefinition(input: MutationDeleteRelativeValuesDefinitionInput!): MutationDeleteRelativeValuesDefinitionResult!
  setUsername(username: String!): MutationSetUsernameResult!
  updateModelSlug(input: MutationUpdateModelSlugInput!): MutationUpdateModelSlugResult!
  updateRelativeValuesDefinition(input: MutationUpdateRelativeValuesDefinitionInput!): MutationUpdateRelativeValuesDefinitionResult!
  updateSquiggleSnippetModel(input: MutationUpdateSquiggleSnippetModelInput!): MutationUpdateSquiggleSnippetModelResult!
}

input MutationCreateRelativeValuesDefinitionInput {
  clusters: [RelativeValuesClusterInput!]!
  items: [RelativeValuesItemInput!]!
  slug: String!
  title: String!
}

union MutationCreateRelativeValuesDefinitionResult = BaseError | CreateRelativeValuesDefinitionResult

input MutationCreateSquiggleSnippetModelInput {
  code: String!
  description: String
  slug: String!
}

union MutationCreateSquiggleSnippetModelResult = BaseError | CreateSquiggleSnippetResult

input MutationDeleteModelInput {
  slug: String!
  username: String!
}

union MutationDeleteModelResult = BaseError | DeleteModelResult

input MutationDeleteRelativeValuesDefinitionInput {
  slug: String!
  username: String!
}

union MutationDeleteRelativeValuesDefinitionResult = BaseError | DeleteRelativeValuesDefinitionResult

union MutationSetUsernameResult = BaseError | Me

input MutationUpdateModelSlugInput {
  newSlug: String!
  oldSlug: String!
  username: String!
}

union MutationUpdateModelSlugResult = BaseError | UpdateModelSlugResult

input MutationUpdateRelativeValuesDefinitionInput {
  clusters: [RelativeValuesClusterInput!]!
  items: [RelativeValuesItemInput!]!
  slug: String!
  title: String!
  username: String!
}

union MutationUpdateRelativeValuesDefinitionResult = BaseError | UpdateRelativeValuesDefinitionResult

input MutationUpdateSquiggleSnippetModelInput {
  code: String @deprecated(reason: "Use content arg instead")
  content: SquiggleSnippetContentInput
  description: String
  relativeValuesExports: [RelativeValuesExportInput!]
  slug: String!
  username: String!
}

union MutationUpdateSquiggleSnippetModelResult = BaseError | UpdateSquiggleSnippetResult

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  me: Me!
  model(input: QueryModelInput!): Model!
  models(after: String, before: String, first: Int, last: Int): ModelConnection!
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  relativeValuesDefinition(input: QueryRelativeValuesDefinitionInput!): RelativeValuesDefinition!
  relativeValuesDefinitions(after: String, before: String, first: Int, last: Int): RelativeValuesDefinitionConnection!
  runSquiggle(code: String!): SquiggleOutput!
  userByUsername(username: String!): User!
  users(after: String, before: String, first: Int, last: Int): QueryUsersConnection!
}

input QueryModelInput {
  ownerUsername: String!
  slug: String!
}

input QueryRelativeValuesDefinitionInput {
  ownerUsername: String!
  slug: String!
}

type QueryUsersConnection {
  edges: [QueryUsersConnectionEdge!]!
  pageInfo: PageInfo!
}

type QueryUsersConnectionEdge {
  cursor: String!
  node: User!
}

type RelativeValuesCluster {
  color: String!
  id: String!
  recommendedUnit: String
}

input RelativeValuesClusterInput {
  color: String!
  id: String!
}

type RelativeValuesDefinition implements Node {
  createdAtTimestamp: Float!
  currentRevision: RelativeValuesDefinitionRevision!
  dbId: ID!
  id: ID!
  owner: User!
  slug: String!
}

type RelativeValuesDefinitionConnection {
  edges: [RelativeValuesDefinitionEdge!]!
  pageInfo: PageInfo!
}

type RelativeValuesDefinitionEdge {
  cursor: String!
  node: RelativeValuesDefinition!
}

type RelativeValuesDefinitionRevision implements Node {
  clusters: [RelativeValuesCluster!]!
  id: ID!
  items: [RelativeValuesItem!]!
  recommendedUnit: String
  title: String!
}

type RelativeValuesExport implements Node {
  definition: RelativeValuesDefinition!
  id: ID!
  variableName: String!
}

input RelativeValuesExportInput {
  definition: DefinitionRefInput!
  variableName: String!
}

type RelativeValuesItem {
  clusterId: String
  description: String!
  id: String!
  name: String!
}

input RelativeValuesItemInput {
  clusterId: String
  description: String
  id: String!
  name: String!
  recommendedUnit: String
}

type SquiggleErrorOutput implements SquiggleOutput {
  errorString: String!
  isCached: Boolean!
}

type SquiggleOkOutput implements SquiggleOutput {
  bindingsJSON: String!
  isCached: Boolean!
  resultJSON: String!
}

interface SquiggleOutput {
  isCached: Boolean!
}

type SquiggleSnippet implements Node {
  code: String!
  dbId: ID!
  id: ID!
}

input SquiggleSnippetContentInput {
  code: String!
}

type UpdateModelSlugResult {
  model: Model!
}

type UpdateRelativeValuesDefinitionResult {
  definition: RelativeValuesDefinition!
}

type UpdateSquiggleSnippetResult {
  model: Model!
}

type User implements Node {
  id: ID!
  models(after: String, before: String, first: Int, last: Int): ModelConnection!
  username: String!
}