
@precedence {
    deref,
    call,
    unary @right,
    control @left,
    exp @left,
    times @left,
    plus @left,
    else @right,
    rel @left,
    and @left,
    or @left
}

@top Program {
    (NonEmptyProgram)?
}


NonEmptyProgram {
    (expression | (Binding (newline | semicolon) | newline)* (expression)) newline*?
}

Statement {
    expression
}

commaSep<content> {
    "" | content ("," content)*
}

Binding { VariableName { identifier } "=" expression }

LambdaArgs {
    "" | LambdaParameter { identifier } ("," LambdaParameter { identifier })*
}

AccessIdentifier {
    Field { identifier } (!deref "." Field { identifier })*
}

expression {
    String
    | Boolean
    | Number
    | BlockExpr { "{" NonEmptyProgram "}" }
    | RecordExpr { "{" commaSep<Entry { Field {identifier} ":" expression }> "}" }
    | LambdaExpr { "{" "|" LambdaArgs "|" expression "}" }
    | IfExpr { if expression then expression !else else expression }
    | ParenExpr { "(" expression ")" }
    | AccessExpr { AccessIdentifier }
    | CallExpr { expression !call "(" commaSep<Argument { expression }> ")" }
    | ArrayExpr { "[" commaSep<expression> "]" }
    | Void { !deref "()" }
    | UnaryExpr { !unary ArithOp { "-" } expression }
    | LogicExpr { 
          expression !or     LogicOp    { "||" }  expression
        | expression !and    LogicOp    { "&&" }  expression
        | expression !rel    LogicOp    { ">" }   expression
        | expression !rel    LogicOp    { "<" }   expression
        | expression !rel    LogicOp    { "<=" }  expression
        | expression !rel    LogicOp    { ">=" }  expression
        | expression !rel    LogicOp    { "==" }  expression
    }
    | ControlExpr { 
          expression !times  ControlOp  { "|>" }  expression
    }
    | ArithExpr { 
          expression !times  ArithOp    { "*" }   expression
        | expression !times  ArithOp    { "/" }   expression
        | expression !exp    ArithOp    { "^" }   expression
        | expression !plus   ArithOp    { "+" }   expression
        | expression !plus   ArithOp    { "-" }   expression
    }
}



Boolean { @specialize[@name="Boolean"]<identifier, "true" | "false"> }

kw<term> { @specialize[@name={term}]<identifier, term> }
if { kw<"if"> }
then { kw<"then"> }
else { kw<"else"> }

@skip { spaces | Comment }

@tokens {

    spaces[@export] { $[ ]+ }
    newline[@export] { $[\n] }
    semicolon[@export] { $[;] }
    Comment { ( "#" | "//" ) ![\n]* }
    
    String { '"' ![\"]* '"' | "'" ![\']* "'" }
    "{" "}" "(" ")" "," "." "="[@name="Equals"]

    Operator[@export] { "|>" "||" "&&" "*" "/" "^" "+" "-" "==" ">" "<" "<=" ">=" }
    
    identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
    word { identifierChar (identifierChar | @digit)* }
    identifier { word }

    Number { 
        (@digit (@digit)* ("." (@digit)*)? | "." (@digit)*) (("e" | "E") ("+" | "-")? (@digit)+)?
    }
    
    @precedence { "." Number }
    @precedence { Comment "/"  }

}
