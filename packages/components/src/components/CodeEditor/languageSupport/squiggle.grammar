@precedence {
    func @cut,
    deref,
    call,
    unary @right,
    exp @right,
    times @left,
    plus @left,
    rel @left,
    and @left,
    or @left,
    control @right,
    else @right,
    logop @right
}

@top Program {
    Import*
    (
        statement
      | semicolon
    )*
    (expression)?
}

blockContent {
    (
        statement
      | semicolon
    )*
    (expression)
}

Import { import ImportName { String } as VariableName { identifier } }

commaSep<content> {
    "" | content ("," content)*
}

// when trailing comma is allowed
commaSep1<content> { "" | content ("," content?)* }

LetStatement { export? VariableName { identifier } "=" expression }

LambdaParameter {
    LambdaParameterName { identifier } (":" expression)?
}

LambdaArgs {
    () | LambdaParameter ("," LambdaParameter)*
}

DefunStatement { export? VariableName { identifier } ~callOrDeclaration "(" LambdaArgs ")" "=" expression }

Decorator {
    "@" DecoratorName { identifier }
    (
        "(" commaSep1<Argument { expression }> ")"
      | ""
    )
}

statement[@isGroup="Statement"] {
    LetStatement
    | DefunStatement
    | DecoratedStatement { Decorator statement }
}

expression {
    expressionWithoutParens
    | ( "(" expression ")" )
}

expressionWithoutParens[@isGroup="Expression"] {
    String
    | Boolean { @specialize[@name="Boolean"]<identifier, "true" | "false"> }
    | Number
    | Block { "{" blockContent "}" }
    | Dict {
        "{"
            commaSep1<
              KeyValue { Field[@dynamicPrecedence=1] { expression } ~inheritAmbig ":" expression } 
            | InheritEntry { Field[@dynamicPrecedence=0] { identifier } ~inheritAmbig }
            >
        "}"
    }
    | Lambda { "{" ArgsOpen { "|" } LambdaArgs "|" blockContent "}" }
    | Identifier { identifier }
    | AccessExpr { expression !deref "." Field { identifier } }
    | Call { expression ~callOrDeclaration !call "(" commaSep<Argument { expression }> ")" }
    | TernaryC { expression !logop LogicOp<"?"> expression LogicOp<":"> expression }
    | TernaryIfThenElse { if expression then expression !else else expression }
    | BracketLookup { expression !call ("[" Key { expression } "]") }
    | Array { "[" commaSep1<expression> "]" }
    | UnaryCall { !unary (ArithOp<"-"> | ArithOp<"!"> | DotArithOp<".-">) expression }
    | InfixCall {
          expression !or     LogicOp<"||">  expression
        | expression !and    LogicOp<"&&">  expression
        | expression !rel    LogicOp<">">   expression
        | expression !rel    LogicOp<"<">   expression
        | expression !rel    LogicOp<"<=">  expression
        | expression !rel    LogicOp<">=">  expression
        | expression !rel    LogicOp<"==">  expression
        | expression !rel    LogicOp<"!=">  expression
        | expression !times  ( ArithOp<"*"> | DotArithOp<".*"> )                expression
        | expression !times  ( ArithOp<"/"> | DotArithOp<"./"> )                expression
        | expression !exp    ( ArithOp<"^"> | DotArithOp<".^"> )                expression
        | expression !plus   ( ArithOp<"+"> | DotArithOp<".+"> )                expression
        | expression !plus   ( ArithOp<"-"> | DotArithOp<".-"> )                expression
        | expression !plus     @extend[@name="ArithOp"]<identifier, "to">       expression
    }
    | Pipe {
          expression !control  ControlOp<"->">  expression
    }
}

// use `@extend` instead of `@specialize`, because keywords are valid variable names in Squiggle, for now.
kw<term> { @extend[@name={term}]<identifier, term> }

if { kw<"if"> }
then { kw<"then"> }
else { kw<"else"> }
import { kw<"import"> }
export { kw<"export"> }
as { kw<"as"> }
@skip { spaces | newline | comment }

comment[@isGroup="Comment"] { BlockComment | LineComment }

@local tokens {
    blockCommentEnd { "*/" }
    blockCommentNewline { "\n" }
    @else blockCommentContent
}
@skip {} {
    BlockComment { "/*" (blockCommentContent | blockCommentNewline)* blockCommentEnd }
}
@skip {} {
    String { '"' (char|"'"|Escape {"\\"escape})* '"' | "'" (char|'"'|Escape {"\\"escape})* "'" }
}

@tokens {
    LineComment { "//" ![\n]* }
    spaces[@export] { $[ ]+ }
    newline[@export] { $[\n] }
    semicolon[@export] { $[;] }

    char { $[\n\u{20}\u{21}\u{23}-\u{26}\u{28}-\u{5b}\u{5d}-\u{10ffff}] }
    escape { $['"\\\/bfnrt] | "u" hex hex hex hex }
    hex  { $[0-9a-fA-F] }
    
    "{" "}" "[" "]" "(" ")" "," "." "="[@name="Equals"]

    "@"[@name="At"]

    ArithOp<expr> { expr }
    DotArithOp[@name="ArithOp"]<expr> { expr }
    ControlOp<expr> { expr }
    LogicOp<expr> { expr }

    identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
    word { identifierChar (identifierChar | @digit)* }
    identifier { word }

    Number {
        (@digit (@digit)* ("." (@digit)*)? | "." (@digit)*) (("e" | "E") ("+" | "-")? (@digit)+)? (identifier)?
    }
    
    @precedence { DotArithOp "." Number }
    @precedence { LineComment '/*' ArithOp  }
}
